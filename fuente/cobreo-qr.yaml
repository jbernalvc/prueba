swagger: '2.0'
info:
  title: API Cobro Qr
  x-ibm-name: cobros-qr-billetera
  version: 3.0.0
  description: >+
    # **API Billetera Cobro QR.**

    API para gestionar transacciones financieras a través de códigos QR.


    Por medio de esta API se le ofrecen a los emisores de tarjetas los
    mecanismos de **validación**, **autorización**, **consultas de información**
    y **cancelación** sobre los **Códigos QR**.

    ## **Requerimientos**

    Para que los emisores puedan operar con la API se deben cumplir los
    siguientes requisitos:
      - Cuenta activa en el portal de APIs de Transbank.
      
      - Aplicación registrada en el portal de APIs en estado aprobado.
      
      - Presentar el identificador único de aplicación (ClientId).
      
      - Presentar el certificado publico del cliente que debió ser cargado desde el portal (Puede ser auto firmado).
      
      - Tener la llave RSA pública generada por Transbank.
      
      - Se deben cifrar todos los campos críticos. Estos se encuentran especificados en cada operación.
      
      - Todas las operaciones deben enviar el parámetro  X-App-Sign  para validar la integridad del mensaje.



    ## **Operaciones y flujo de implementación**


    ### 1) Validación código Qr
     Con el fin de realizar la validación del código Qr del pago generado se debe realizar la invocación a esta operación que le permitirá validar la integridad de dicho código.
     
     Esta operación devolvera toda la información necesaria de la transacción para continuar con el flujo de la billetera
     
    ### 2) Autorizar Pago
     Para realizar la confirmación del pago QR se deben enviar los datos de autenticación emisora y los datos de preferencia del tarjeta habiente.

    ### 3) Estado Pago
     Luego de la solicitud de autorización de Pago por parte de las Billeteras, CobroQR informará la actualización de estados de este pago mediante un Webhook que debe respetar el [contrato correspondiente](https://studio-ws.apicur.io/sharing/93a991dc-7153-4097-be4e-e6b7ded75343). 
     
    ### 4) Obtener detalle de pago autorizado
     Esta operación permite entregar el detalle del pago realizado de forma exitosa.

    ### 5) Rechazar pago (opcional)
     En algunas ocasiones es posible rechazar la transacción por diferentes motivos, esta operacion es opcional y no pertenece al flujo normal de un pago.
     

    ## **Cifrado de Mensajería** 

    ### **Llaves utilizadas en el proceso de cifrado**

    Para realizar el proceso de cifrado es necesario contar con lo siguiente:

    #### 1) **Llave de trabajo (Key):** 

    Llave generada por el emisor, se utilizará para el cifrado y el firmado.
    Esta llave puede tener una duración definida por el emisor y puede ser
    diferente por cada petición. 
        
      - Debe ser de **32 caracteres**
        
      - Viajará en el header X-App-Key
        
      - Será cifrada con  RSA-OAEP y Digest SHA256
        
      - Se enviará en formato  Base64 con la llave pública expuesta por el servidor, para que sea descifrada posteriormente.

    **Ejemplos de cifrado**

    >```

    >// Llave generada sin cifrar

    >

    >"0f2da132d5e2afa46ad63291171ef4d0"

    >

    >// Llave generada cifrada en parámetro

    >

    >"X-App-Key:"
    "KgA9biq+tTyoUqQGwcLlAUkY0G5NbL0XCbiRwcharAgfn6LgN9tIEioxo/D249Fe5oQh1Nwot3ZuTzMNjTAu2+bMSG+JMQnmcu2kb1ioufw4mlTb8q3vRrMlltJCJxqBWKW/Ws9/rOEKSXqzt7++ZhPGIa2135bJke1Nb6TqaO4vUsNbd465pypvL56LyQiWwCd8grRIJ/vCZ1NOU1ocQ7lU3suur5M8+c8EDQUYCPjqMJZxmPWYFdME5bqtWrXvlTU/NjtHGR4l+3roZSThQukCnkStLAFxFZvV2gAhPj1+LKwy0DxgSPDI5tj6+eVgVHMTA71K/tpS0exIlL1BMg=="

    >```

    #### 2) **Vector de Inicialización (IV):** 

    Es una cadena de texto, la cual se utiliza en el proceso de cifrado.

      - Debe ser de **16 caracteres**
        
      - Se utilizará para cifrar cada campo necesario según el contrato y debe ser un valor único para cifrar cada campo.
        
    **Ejemplo**
      
    >```

    >iv = 970ec959815a4096

    >```

    #### 3) **Llave RSA pública:** 

    Esta llave es **generada por transbank** y se utilizará para cifrar la llave
    generada por el emisor.

       - Se utilizará para cifrar la llave de trabajo (key)        
       
       - Será de largo **2048**


    ### **Algoritmos utilizados en el proceso de cifrado**

    Los algoritmos utilizados para el cifrado de la mensajería son los
    siguientes:

      - [AES-256-CBC](https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#aes256-cbc): Utilizado para cifrar y descifrar los campos.
      
      - [RSA-OAEP](https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#rsa-oaep-mgf1p) con [SHA256](https://www.w3.org/2001/04/xmlenc#sha256): Utilizado para cifrar la llave de trabajo.


    ### **Flujo del cifrado**

    El proceso de cifrado se compone de dos partes, el primer paso es **cifrar
    la llave de trabajo** y luego **el cifrado de los campos**.


    Posteriormente, será necesaria la firma del mensaje para su correcto envío,
    y finalmente la validación de la integridad de la respuesta recibida.

    #### 1) **Cifrado de la llave de trabajo**
      
    La llave de trabajo debe ser cifrada con la llave pública entregada por
    Transbank, para ello se utilizará el algoritmo **RSA-OAEP** (Digest
    **SHA256** y padding **MGF1** ).


    Una vez se obtiene la llave de trabajo cifrada, se debe añadir como valor al
    encabezado **X-App-Key**.

    - **Prueba de cifrado**

      El proceso de cifrado de la llave se puede probar en el siguiente [link](https://www.codeusingjava.com/tools/rsa). En la web se debe ingresar la llave de trabajo generada, la llave pública entregada por Transbank y seleccionar el algoritmo **RSA-OAEP** con **SHA256** y con padding
      **MGF1** e indicar que el tipo de llave es pública, finalmente se debe presionar el botón Encrypt.
       
    - **Ejemplo de datos cifrados**
      
    >```

    >//Parte pública de un par de llaves RSA de largo 2048. Ésta será provista
    por TBK.           

    >

    >"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkwC/fgkxfrRHVdaJCUO8wzxhQNBv1StQS1r3qyVQI5h42VMMyDcb3g4/QJ8YmgwH3nwK8EMomfR6d08A0NigITBXlXVipVHtZhltOIqgNF8F+ozcv3mhGTwIAR/vi3Y54F0LkI4hHrooB9XYWPqISBH8W9CHfKsvmyB0v+zJ+Lc33MH3FNrEvkocO2ZtvEX/tFHzlu31QqkyITWMZlZAGDRtyVvasJs22Eg1ldYm5GPrIEaSU/MPpzAoHPKId92si6EErby+gs1oIY+3z1158lQawqpB4+l0WgFZppv1aUrNe6aprZ2yaCN5lgywanPNesDLGGGyGBoyXs0xEOrKAwIDAQAB"            

    >

    >// Texto a cifrar            

    >

    >"0f2da132d5e2afa46ad63291171ef4d0"        

    >

    >// Llave de trabajo cifrada    

    >

    >"KgA9biq+tTyoUqQGwcLlAUkY0G5NbL0XCbiRwcharAgfn6LgN9tIEioxo/D249Fe5oQh1Nwot3ZuTzMNjTAu2+bMSG+JMQnmcu2kb1ioufw4mlTb8q3vRrMlltJCJxqBWKW/Ws9/rOEKSXqzt7++ZhPGIa2135bJke1Nb6TqaO4vUsNbd465pypvL56LyQiWwCd8grRIJ/vCZ1NOU1ocQ7lU3suur5M8+c8EDQUYCPjqMJZxmPWYFdME5bqtWrXvlTU/NjtHGR4l+3roZSThQukCnkStLAFxFZvV2gAhPj1+LKwy0DxgSPDI5tj6+eVgVHMTA71K/tpS0exIlL1BMg=="

    >```

    - **Ejemplo de cifrado (JS)**
       
    >```

    >

    >const { tbkWorkingKey } = process.env;

    >

    >const fetchData = fetch('https://urlapitbk.cl/', { ..., header: {
     >  'Content-Type': 'application/json',
     > 'X-App-Key': tbkWorkingKey
    >})

    >

    >```


    #### 2) **Cifrado de los campos**
        
    La encriptación de los campos debe ser realizada utilizando el algoritmo
    **AES** en modo **CBC** con un tamaño de llave de **256**.


    Cuando se realiza el cifrado de los campos, al momento de agregar el campo
    en la petición, se debe añadir el **vector de inicialización** utilizado al
    final de cada campo.
      
    Los campos a cifrar son todos los que se consideran críticos en el mensaje,
    estos se encontrarán especificados en cada operación.

    - **Prueba de cifrado**

      Puedes probar el proceso de cifrado en el siguiente [link](https://www.javainuse.com/aesgenerator). En la web se debe ingresar el texto a cifrar, seleccionar el
      modo y el tamaño de la llave.

      Luego, se debe ingresar el vector de inicialización, ingresar la llave de trabajo como texto plano, seleccionar como
      salida el formato **hex**.

      Finalmente, presionar el botón **Encrypt**.

    - **Ejemplo de datos cifrados**

    >```

    >llave de trabajo

    >

    >numeroTarjeta = "123456781234567812345678"

    >

    >numeroTarjetaCifrado =
    "b0236114bbbc534ed635fabc55384bbe81f815bc2120714a8410e335c14fce39"

    >

    >vectorInicializacion = "fda2b1534fe29d8a"

    >

    >numeroTarjetaCifradoAEnviar =
    "b0236114bbbc534ed635fabc55384bbe81f815bc2120714a8410e335c14fce39fda2b1534fe29d8a"

    >```
        
    - **Ejemplo de cifrado (JS)**

    >```

    >const crypto = require('crypto');

    >

    >const ENC_KEY = "bf3c199c2470cb477d907b1e0917c17b"; // clave aleatorea

    >

    >const IV = "5183666c72eec9e4"; // initialisation vector

    >

    >// ENC_KEY and IV can be generadas con
    crypto.randomBytes(32).toString('hex');

    >

    >const numeroTarjeta = "123456781234567812345678";

    >

    >const encrypt = ((val) => {

    >

    >    let cipher = crypto.createCipheriv('aes-256-cbc', ENC_KEY, IV);

    >

    >    let encrypted = cipher.update(val, 'utf8', 'hex');

    >

    >    encrypted += cipher.final('base64');

    >

    >    return encrypted;

    >   });

    >

    >const numeroTarjetaCifrado = encrypt(numeroTarjeta) + IV;

    >``` 


    #### 3) **Firma del Mensaje** 

    Para garantizar la integridad del mensaje, es necesario realizar una firma
    de los datos enviados en la solicitud, para esto,se debe enviar en el
    header  **X-App-Sign el** resultado de la firma del mensaje en formato
    **base64** .
        
    Puedes probar el proceso de firmado en el siguiente
    [link](https://www.devglan.com/online-tools/hmac-sha256-online).

    1. Para generar la firma, se debe aplicar un  **HMAC-SHA256**  a los datos
    del mensaje, utilizando la llave de trabajo.


    2. Luego, dependiendo del tipo de método utilizado, se debe cifrar los
    parámetros enviados por la URL (**query parameters**) o en el cuerpo de
    mensaje (**body**)

     - #### **Mensaje por método (GET)**
        
    En el caso de que el método de la solicitud sea un  GET  se debe obtener los
    parámetros de la query a los cuales
          se le aplicará el  **HMAC**.

    - **Ejemplo:**

    Se utilizarán los parámetros de consulta de la operación GET 
            
    >```

    >  curl --location --request GET
    'https://api.transbank.cl/transbank/publico/qr-codes?amount=C5B35A8A69B4F7E1D8B106F2258A9CDA1234567887654321&currency=E96322297804FCBBF748B2F4FBB3F4A71234567887654321&simpleCode=635219&codeKey=5214%203535&tipAmount=C5B35A8A69B4F7E1D8B106F2258A9CDA1234567887654321'
    \
     >          
    >  --header 'X-App-Key: {{appKey}}' \

    >  --header 'X-Client-Id: {{clientId}}' \

    >  --header 'X-Client-Certificate: {{clientCertificate}}' \

    >```


    Ingresamos a la herramienta y pegamos el texto a realizar HMAC .
          
    Copiamos la llave y se selecciona  SHA-256  como la función hash.
    Seleccionaremos que la salida del texto sea **base64**

    >```

    >  Llave de trabajo: "0f2da132d5e2afa46ad63291171ef4d0"

    >

    >  Texto a cifrar: 

    >

    > 
    "amount=C5B35A8A69B4F7E1D8B106F2258A9CDA1234567887654321&currency=E96322297804FCBBF748B2F4FBB3F4A71234567887654321&simpleCode=635219&codeKey=5214%203535&tipAmount=C5B35A8A69B4F7E1D8B106F2258A9CDA1234567887654321"

    >

    >  Resultado: "gb3viR8tc7kHIHvUjQ9sWYGZOXnVop+dX7+fwzTZjB0="

    >```


    Luego de la generación del **HMAC** se añadirá el header **X-App-Sign** a la
    petición que se desea enviar a la API.


    >```

    >"X-App-Sign":"gb3viR8tc7kHIHvUjQ9sWYGZOXnVop+dX7+fwzTZjB0="

    >```

    - #### **Mensaje métodos con (body)**


    En el caso de que el método de la solicitud sea un  **POST**  se debe
    obtener el objeto **data** del cuerpo (**body**) al cual se le aplicará el 
    **HMAC** 

    - **Ejemplo:** Petición **POST** 
            
    >```

    >  curl --location --request POST
    'https://api.transbank.cl/transbank/publico/qr-payments' \

    >  --header 'X-App-Key: {{appKey}}' \

    >  --header 'X-App-Key: {{clientId}}' \

    >  --header 'X-Client-Certificate: {{clientCertificate}}' \

    >  --header 'Content-Type: application/json' \

    >  --data-raw '{

    >      "meta": {

    >          "_rqDateTime": "2020-02-10T09:30Z"

    >      },

    >      "data": {

    >        "id": "123456789023454310",

    >        "notifyURL": "https://internal.banco.cl/callback",

    >        "userSelection": [

    >            {

    >              "paymentType": "VD",

    >              "shares": 1,

    >              "childId": "13A8b"

    >            },

    >            {

    >             "paymentType": "VC",

    >              "shares": 3,

    >              "childId": "13A8bn"

    >            }

    >        ],

    >        "cardNumber": "1234567812345678",

    >        "expirationDate": "12/2021",

    >        "cavv": "964",

    >        "vci": "147",

    >        "eci": "258",

    >        "cvv": "931",

    >        "cardType": "DEBIT",

    >        "cardBrand": "MAGNA"

    >      }

    >    }'

    >```


    Es importante que previo a generar el  **HMAC**  el **JSON** debe estar
    convertido a una **cadena de texto** (utilizando el método **stringify** ),
    la cadena resultante no debe contener espacios.


    >```

    >{"id":"123456789023454310","notifyURL":"https://internal.banco.cl/callback",

    >"userSelection":[{"paymentType":"VD","shares":1,"childId":"13A8b"},{"paymentType":"VC","shares":3,"childId":"13A8bn"}],

    >"cardNumber":"1234567812345678","expirationDate":"12/2021","cavv":"964","vci":"147","eci":"258","cvv":"931","cardType":"DEBIT","cardBrand":"MAGNA"}

    >```


    Una vez transformado el **JSON** a una cadena de texto, ingresamos a la
    [herramienta](https://www.devglan.com/online-tools/hmac-sha256-online) y
    pegamos el texto al cual se desea realizar el  **HMAC**.
            
    Copiamos la llave que se va a utilizar y se selecciona **SHA-256** como la
    función hash.


    >```

    >Ejemplo: "0f2da132d5e2afa46ad63291171ef4d0"

    >

    >Texto a cifrar:
    "{"id":"123456789023454310","notifyURL":"https://internal.banco.cl/callback","userSelection":[{"paymentType":"VD","shares":1,"childId":"13A8b"},{"paymentType":"VC","shares":3,"childId":"13A8bn"}],"cardNumber":"123456781

    >

    >2345678","expirationDate":"12/2021","cavv":"964","vci":"147","eci":"258","cvv":"931","cardType":"DEBIT","cardBrand":"MAGNA"}"

    >

    >Resultado:"hWyOQbYXMI9eW2ZasC8ODmGafiJ15A/4MKWaOqGjE8Y="

    >```



    Luego de la generación del  **HMAC**  se añadirá el header  **X-App-Sign** 
    a la petición que se desea enviar a la API.


    >```

    >"X-App-Sign":"hWyOQbYXMI9eW2ZasC8ODmGafiJ15A/4MKWaOqGjE8Y="

    >```

    #### 4) **Validación de la integridad de la respuesta**
      
    En respuesta de la API se enviará el header **X-App-Sign** con un **HMAC**
    en **base64** de los datos del mensaje, se debe comparar este valor con el
    **HMAC** generado anteriormente y para así validar la integridad del mensaje
    recibido.

    ## **Registro de aplicaciones**

    Mediante la plataforma web de API Portal, puede crear las aplicaciones que
    se van a suscribir  a la api, debe tener en cuenta el nombre de la
    Aplicación para realizar  peticiones en producción o ambiente restringido:

    - Para realizar pruebas en ambiente QA el nombre de la aplicación debe
    contener los caracteres "**QA**" en cualquier posición. 
      
      **Ejemplo:** ApplicationQA  
     
    - Para realizar pruebas en producción la aplicación debe contener cualquier
    nombre sin QA.
      
      **Ejemplo:** ApplicationPROD, Application, entre otras

  contact:
    name: Soporte Transbank
    url: https://portal.api.transbank.cl
    email: soporte@transbank.cl
  x-ibm-summary: ''
schemes:
  - https
basePath: /v3
produces:
  - application/json
consumes:
  - application/json
security:
  - clientIdHeader: []
securityDefinitions:
  clientIdHeader:
    type: apiKey
    description: >-
      Identificador generado para identificar del cliente que realiza la
      solicitud
    name: X-Client-Id
    in: header
    x-key-type: client_id
x-ibm-configuration:
  cors:
    enabled: true
  type: rest
  phase: realized
  enforced: true
  testable: true
  application-authentication:
    certificate: true
  gateway: datapower-api-gateway
  assembly:
    execute:
      - gatewayscript:
          version: 2.0.0
          title: isMock
          source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida si la peticion es mock\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"inicio de isMock\");\r\n\r\n/*\r\n* Lectura de variable mock\r\n*/\r\ncontext.set('ctx.mock', 0);\r\nlet isMock = context.request.header.get('X-Mock');\r\nconsole.error('Valor de mock enviado %s', isMock);\r\n\r\n/*\r\n* mapeo de variable para ir a mocks\r\n*\r\n*/\r\nif(isMock && isMock != undefined){\r\n    context.set('ctx.mock', 1);\r\n    console.error('es mock');\r\n}else{\r\n    console.error('no es mock');\r\n}\r\n"
          description: GatewayScript que valida si la peticion es mock
      - gatewayscript:
          version: 2.0.0
          title: getWalletId
          description: >-
            gatewayScript encargado de obtener el rut de la organizacion
            consumidora
          source: |-
            /**
            *  _______                  _                 _    
            * |__   __|                | |               | |   
            *    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __
            *    | | '__/ _` | '_ \/ __| '_ \ / _` | '_ \| |/ /
            *    | | | | (_| | | | \__ \ |_) | (_| | | | |   < 
            *    |_|_|  \__,_|_| |_|___/_.__/ \__,_|_| |_|_|\_\ 2023
            * 
            ************************************************************
            * Descripcion  : GatewayScript que obtiene el rut
            * Autores      : exetrivino@transbank.cl
            ************************************************************
            *
            * @version: 2023/02/13
            * @desc:  version inicial
            * 
            */

            /*
            * Se obtiene rut 
            */

            const walletId = context.get('client.org.name').toUpperCase();

            // Se setea en headers para backend
            context.set("walletRut", walletId);

            console.error("el rut es: " + walletId);
      - gatewayscript:
          version: 2.0.0
          title: isRestrictedProduction
          source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que obtiene el appName de la org para definir\r\n                si tomara el camino de produccion o produccion restringido.\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"validacion prod Restringido.....\");\r\n\r\nconst appName = context.get('client.app.name').toUpperCase();\r\nconst valueRestrictedProduction = context.get('api.properties.valueRestrictedProduction').toUpperCase();\r\n\r\ncontext.set(\"ctx.restrictedProduction\", appName.includes(valueRestrictedProduction)? 1 : 0);\r\n\r\nconsole.error(`valueRestrictedProduction is: ${context.get(\"ctx.restrictedProduction\")}`);"
          description: >-
            Gateway encargado de validar el nombre de app consumidora (con
            terminación en QA)
      - switch:
          version: 2.0.0
          title: switch
          case:
            - condition: ($operationPath() = '/qr-codes' and $httpVerb() = 'GET')
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: validateHeader
                    description: gatewayscript que valida los headers enviados
                    source: >-
                      /**

                      *  _______                  _                 _    

                      * |__   __|                | |               | |   

                      *    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __

                      *    | | '__/ _` | '_ \/ __| '_ \ / _` | '_ \| |/ /

                      *    | | | | (_| | | | \__ \ |_) | (_| | | | |   < 

                      *    |_|_|  \__,_|_| |_|___/_.__/ \__,_|_| |_|_|\_\ 2023

                      * 

                      ************************************************************

                      * Descripcion  : GatewayScript que valida los headers
                      enviados

                      * Autores      : exetrivino@transbank.cl

                      ************************************************************

                      *

                      * @version: 2023/02/13

                      * @desc:  version inicial

                      * 

                      */


                      const defaultErrorMessage = "Invalid Parameter: Validation
                      Failure";

                      console.error("Inicia validacion de headers");


                      let key = context.get('request.headers.X-App-Key');

                      let hmac = context.get('request.headers.X-App-Sign');

                      let paymentId =
                      context.get('request.headers.X-Client-Payment-Id');

                      let errors = [];


                      addValidation("X-App-Key",
                          (!key),
                          {
                              "code": "422",
                              "detail": "El header X-App-Key es obligatorio",
                              "source": {" pointer": "X-App-Key" }
                          });

                      addValidation("X-App-Sign",
                          (!hmac),
                          {
                              "code": "422",
                              "detail": "El header X-App-Sign es obligatorio",
                              "source": {" pointer": "X-App-Sign" }
                          });

                      addValidation("X-Client-Payment-Id",
                          (!paymentId),
                          {
                              "code": "422",
                              "detail": "El header X-Client-Payment-Id es obligatorio",
                              "source": {" pointer": "X-Client-Payment-Id" }
                          });

                      addValidation("X-Client-Payment-Id",
                          (isAplhaNumericFormat(paymentId)),
                          {
                              "code": "422",
                              "detail": "El header X-Client-Payment-Id esta mal formado",
                              "source": {" pointer": "X-Client-Payment-Id" }
                          });

                      if(errors.length > 0){
                          throwError();
                      }


                      /***
                       * Adiciona un error de validación a la estructura general de errores
                       * @param field
                       * @param isError
                       * @param errorObj
                       * @param isImmediate
                       */
                      function addValidation(field, isError, errorObj,
                      isImmediate) {
                          console.info("Verificacion de validacion campo %s ", field);
                          if (isError) {
                              console.info("Falla de validacion identificada en %s ", field);
                              errors.push(errorObj);
                          }
                      }


                      function isAplhaNumericFormat(value){
                          
                          let reg = /^[a-zA-Z0-9]+$/;
                          if(reg.test(value)){
                              return false;
                          }
                          return true;
                      }


                      /*** 

                      * Se utiliza apim.error para lanzar el error 

                      */

                      function throwError() {
                          if (errors) {
                              const minStatus = errors.reduce((min, err) => err.code < min ? err.code : min, errors[0].code);
                              const errorData = {
                                  minStatus,
                                  errors
                              };
                              context.set("ctx.errorData", errorData);
                              context.reject("ParametersException", defaultErrorMessage);
                          }
                      }
                - xslt:
                    version: 2.1.0
                    title: decipherKey
                    input: true
                    serialize-output: false
                    source: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"1.0\"\r\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    xmlns:dp=\"http://www.datapower.com/extensions\"\r\n    xmlns:func=\"http://exslt.org/functions\"\r\n    xmlns:apigw=\"http://www.ibm.com/xmlns/datapower/2017/11/apigateway\"\r\n    extension-element-prefixes=\"apigw\"\r\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <xsl:include href=\"store:///dp/msgcat/xslt.xml.xsl\"/>\r\n    <xsl:template match=\"/\">\r\n        <xsl:variable name=\"key\">\r\n            <xsl:value-of select=\"apigw:get-header('request','X-App-Key')\"/>\r\n        </xsl:variable>\r\n        <xsl:variable name=\"cryptoKey\">\r\n            <xsl:value-of select=\"apigw:get-variable('api.properties.cryptoKey')\"/>\r\n        </xsl:variable>\r\n        <apigw:set-variable name=\"'ctx.key'\" value=\"dp:decrypt-key($key,$cryptoKey,'http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p','','http://www.w3.org/2001/04/xmlenc#sha256')\"/>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
                    compile-settings: {}
                    description: >-
                      Descifra la llave de trabajo enviada en el header:
                      X-App-Key
                - gatewayscript:
                    version: 2.0.0
                    title: messageIntegrityValidationValidate
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida la integridad del mensaje\r\n*               comparando la firma enviada en el header (X-App-Sign) \r\n*               vs la firma generada por la api.\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\nconsole.error(\"Inicia messageIntegrity\");\r\nconst crypto = require('crypto');\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nconst hmac = context.request.header.get('X-App-Sign');\r\nconst valueKey = context.get('ctx.key');\r\nlet key = Buffer.from(Buffer.from(valueKey, 'base64').toString('ascii'));\r\nlet hmacGenerated = crypto.createHmac('hmac-sha256', key);\r\nlet errors = [];\r\nlet attributes = context.get(\"request.parameters\");\r\nvar hmacResult = \"\";\r\nif (attributes.codeKey) {\r\n    var codeKey = attributes.codeKey.values.join('');\r\n    var URI = decodeURI(codeKey);\r\n    var qs = context.get('request.querystring');\r\n    console.error(\"qs: \" + qs);\r\n    console.error(\"decoded: \" + URI);\r\n    context.set(\"CodeKeyDecoded\", URI);\r\n    var param = \"codeKey=\" + URI;\r\n    hmacResult = hmacGenerated.update(param).digest('base64');\r\n\r\n}\r\nelse {\r\n    hmacResult = hmacGenerated.update(context.get('request.querystring')).digest('base64');\r\n}\r\n\r\n\r\naddValidation(\"simpleCode\",\r\n    (hmac !== hmacResult),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": `No se ha podido validar la integridad de los parametros enviados`,\r\n        \"source\": { \"pointer\": \"params\" }\r\n    });\r\naddValidation(\"codeKey\",\r\n    (hmac !== hmacResult),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": `No se ha podido validar la integridad de los parametros enviados`,\r\n        \"source\": { \"pointer\": \"params\" }\r\n    });\r\n\r\nif (errors.length > 0) {\r\n    throwError();\r\n}\r\n/***\r\n * Adiciona un error de validación a la estructura general de errores\r\n * @param field\r\n * @param isError\r\n * @param errorObj\r\n * @param isImmediate\r\n */\r\nfunction addValidation(field, isError, errorObj, isImmediate) {\r\n    console.info(\"Verificacion de validacion campo %s \", field);\r\n    if (isError) {\r\n        console.info(\"Falla de validacion identificada en %s \", field);\r\n        errors.push(errorObj);\r\n    }\r\n}\r\n\r\n\r\n/*** \r\n* Se utiliza apim.error para lanzar el error \r\n*/\r\nfunction throwError() {\r\n    if (errors) {\r\n        const minStatus = errors.reduce((min, err) => err.code < min ? err.code : min, errors[0].code);\r\n        const errorData = {\r\n            minStatus,\r\n            errors\r\n        };\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ParametersException\", defaultErrorMessage);\r\n    }\r\n}"
                    description: >-
                      GatewayScript que valida la integridad del mensaje
                      comparando la firma enviada en el header (X-App-Sign) vs
                      la firma generada por la api.
                - gatewayscript:
                    version: 2.0.0
                    title: validateBody
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida los parametros enviados\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validacion de simplecode o codekey\");\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nconsole.error(\"appKey: \" + context.get(\"ctx.key\"));\r\n\r\nlet attributes = context.get(\"request.parameters\");\r\n\r\nlet errors = [];\r\n\r\n\r\n\r\naddValidation(\"simpleCode\",\r\n    (!attributes.codeKey && !attributes.simpleCode),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": `Al menos debe ir un campo obligatorio`,\r\n        \"source\": { \"pointer\": \"codeKey\" }\r\n        \r\n    });\r\naddValidation(\"simpleCode\",\r\n    (attributes.codeKey && attributes.simpleCode),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": `solo debe ir un campo`,\r\n        \"source\": { \"pointer\": \"simpleCode & codeKey\" }\r\n    });\r\n\r\nif (errors.length > 0) {\r\n    throwError();\r\n}\r\n\r\n/***\r\n * Adiciona un error de validación a la estructura general de errores\r\n * @param field\r\n * @param isError\r\n * @param errorObj\r\n * @param isImmediate\r\n */\r\n \r\n function addValidation(field, isError, errorObj, isImmediate) {\r\n     console.info(\"Verificacion de validacion campo %s \", field);\r\n     if (isError) {\r\n         console.info(\"Falla de validacion identificada en %s \", field);\r\n         errors.push(errorObj);\r\n        }\r\n    }\r\n\r\n/*** \r\n* Se utiliza apim.error para lanzar el error \r\n*/\r\nfunction throwError() {\r\n    if (errors) {\r\n        const minStatus = errors.reduce((min, err) => err.code < min ? err.code : min, errors[0].code);\r\n        const errorData = {\r\n            minStatus,\r\n            errors\r\n        };\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ParametersException\", defaultErrorMessage);\r\n    }\r\n}"
                    description: >-
                      GatewayScript que valida la  existencia de los parametros
                      enviados
                - gatewayscript:
                    version: 2.0.0
                    title: validateParameters
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida los parametros enviados\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validacion de parametros enviados\");\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\n\r\nlet codeKeyParameter = context.get('request.parameters.codeKey');\r\nlet simpleCodeParameter = context.get('request.parameters.simpleCode');\r\nlet userIdParameter = context.get('request.parameters.userId');\r\n\r\nlet codeKey = codeKeyParameter ? codeKeyParameter.values.join(''): undefined;\r\nlet simpleCode = simpleCodeParameter ?  simpleCodeParameter.values.join(''): undefined;\r\nlet userId = userIdParameter ? userIdParameter.values.join(''): undefined;\r\n\r\nlet maxCodeKey = context.get('api.properties.maxCodeKey');\r\nlet maxSimpleCode = context.get('api.properties.maxSimpleCode');\r\n\r\nlet minUserId = context.get('api.properties.minUserId');\r\nlet maxUserId = context.get('api.properties.maxUserId');\r\nlet errors = [];\r\n\r\nif(!codeKey ){\r\n    addValidation(\"simpleCode\",\r\n    !simpleCode,\r\n        { \"code\": \"422\",\r\n        \"detail\": `El campo simpleCode es requerido si no es enviado el codeKey`,\r\n        \"source\": { \"pointer\" : \"simpleCode\" }\r\n        \r\n        });\r\n}\r\n\r\nif(!simpleCode ){\r\n\r\n    addValidation(\"codeKey\",\r\n    !codeKey,\r\n        { \"code\": \"422\",\r\n        \"detail\": `El campo codeKey es requerido si no es enviado el simpleCode`,\r\n        \"source\": { \"pointer\" : \"codeKey\" }\r\n        });\r\n}\r\n\r\nif (errors.length > 0) {\r\n    throwError();\r\n}\r\n\r\n\r\nif(simpleCode){\r\n    \r\n    addValidation(\"simpleCode\",\r\n    (simpleCode.length > maxSimpleCode), // no cumple que sea de 8 caracteres\r\n        {\r\n        \"code\": \"422\",\r\n        \"detail\": `El simpleCode ${simpleCode}  debe ser de ${maxSimpleCode} caracteres`,\r\n        \"source\": { \"pointer\": \"simpleCode\" }\r\n    });\r\n    \r\n    addValidation(\"simpleCode\",\r\n    isAplhaNumericFormat(simpleCode), // no cumple que sea de 250 caracteres\r\n        {\r\n        \"code\": \"422\",\r\n        \"detail\": `El simpleCode ${simpleCode}  debe ser alfanumerico`,\r\n        \"source\": { \"pointer\": \"simpleCode\" }\r\n    });\r\n}\r\n\r\n\r\nif(userId){\r\n    addValidation(\"userId\",\r\n    isAplhaNumericFormat(userId), // no cumple formato alfanumerico\r\n        {\r\n        \"code\": \"422\",\r\n        \"detail\": `El userId ${userId}  debe ser alfanumerico`,\r\n        \"source\": { \"pointer\": \"userId\" }\r\n    });\r\n\r\n    addValidation(\"userId\",\r\n    (userId.length < parseInt(minUserId) || userId.length > parseInt(maxUserId) ), // no que el numero de caracteres este entre el rango\r\n        {\r\n        \"code\": \"422\",\r\n        \"detail\": `El userId ${userId}  debe ser de largo mínimo de ${minUserId} y máximo de ${maxUserId}`,\r\n        \"source\": { \"pointer\": \"userId\" }\r\n    });\r\n}\r\n\r\n\r\n\r\nif (errors.length > 0) {\r\n    throwError();\r\n}\r\n\r\n/***\r\n * Adiciona un error de validación a la estructura general de errores\r\n * @param field\r\n * @param isError\r\n * @param errorObj\r\n * @param isImmediate\r\n */\r\nfunction addValidation(field, isError, errorObj, isImmediate) {\r\n    console.info(\"Verificacion de validacion campo %s \", field);\r\n    if (isError) {\r\n        console.info(\"Falla de validacion identificada en %s \", field);\r\n        errors.push(errorObj);\r\n    }\r\n}\r\n\r\n\r\n/*** \r\n* Se utiliza apim.error para lanzar el error \r\n*/\r\nfunction throwError() {\r\n    if (errors) {\r\n        const minStatus = errors.reduce((min, err) => err.code < min ? err.code : min, errors[0].code);\r\n        const errorData = {\r\n            minStatus,\r\n            errors\r\n        };\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ParametersException\", defaultErrorMessage);\r\n    }\r\n}\r\n\r\n\r\nfunction isAplhaNumericFormat(value){\r\n    \r\n    let reg = /^[a-zA-Z0-9]+$/;\r\n    if(reg.test(value)){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Valida que el numero ingresado sea un numerico\r\n */\r\nfunction isNumberFormat(number){\r\n    \r\n    let reg = /^[+]?([0-9]+(?:[\\.][0-9]*)?|\\.[0-9]+)$/;\r\n    if(reg.test(number)){\r\n        return false;\r\n    }\r\n    return tru
                    description: GatewayScript que valida los parametros enviados
                - gatewayscript:
                    version: 2.0.0
                    title: buildUrlParams
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que construye los header necesarios\r\n*               para el servicio nativo\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia buildParams\");\r\nlet userId = context.get('request.parameters.userId');\r\nlet flowId = context.message.header.get('X-Client-Payment-Id');\r\n\r\ncontext.message.header.set(\"x-flow-id\",flowId);\r\n\r\nvar code = context.get(\"request.parameters.codeKey\");\r\nvar simple = context.get(\"request.parameters.simpleCode\");\r\n\r\nif(userId){\r\n\r\n    context.message.header.set(\"x-user-id\",userId);\r\n}\r\n\r\nconsole.error(\"headers enviados: \" + JSON.stringify(context.get('message.headers')));\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
                    description: >-
                      GatewayScript que construye los header necesarios para el
                      servicio nativo
                - map:
                    version: 2.0.0
                    title: map
                    inputs: {}
                    outputs:
                      output:
                        schema:
                          description: ''
                          type: object
                          properties:
                            codeKey:
                              type: string
                              name: codeKey
                            simpleCode:
                              type: string
                              name: simpleCode
                          example: >-
                            {"codeKey":"020101021226320012cl.transbank0112597039238551520400005303152540488.05802CL5904TEST6008SANTIAGO80720024cl.transbank.pay.options0108T00055730212APP_COBRO_QR0312APP_COBRO_QR81730029cl.transbank.pay.options.uuid0136c6adc5d6-ed90-4a8f-87e5-d736bac813146304D60B","simpleCode":"T00010"}
                        variable: message.body
                        content: application/json
                    actions:
                      - set: output.codeKey
                        value: apim.getvariable('request.parameters.codeKey');
                      - set: output.simpleCode
                        value: apim.getvariable('request.parameters.simpleCode');
                - switch:
                    version: 2.0.0
                    title: switch
                    case:
                      - condition: (ctx.mock=1)
                        execute:
                          - invoke:
                              version: 2.2.0
                              title: invokeMock
                              backend-type: detect
                              header-control:
                                type: blocklist
                                values: []
                              parameter-control:
                                type: allowlist
                                values: []
                              http-version: HTTP/1.1
                              timeout: 60
                              verb: keep
                              chunked-uploads: true
                              persistent-connection: true
                              cache-response: protocol
                              cache-ttl: 900
                              stop-on-error: []
                              graphql-send-type: detect
                              websocket-upgrade: false
                              target-url: $(target-url-mock-qrcodes)
                      - otherwise:
                          - switch:
                              version: 2.0.0
                              title: switch
                              case:
                                - condition: (ctx.restrictedProduction=1)
                                  execute:
                                    - invoke:
                                        version: 2.2.0
                                        title: invokeRestrictedProd
                                        backend-type: detect
                                        header-control:
                                          type: blocklist
                                          values: []
                                        parameter-control:
                                          type: allowlist
                                          values: []
                                        http-version: HTTP/1.1
                                        timeout: 60
                                        verb: keep
                                        chunked-uploads: true
                                        persistent-connection: true
                                        cache-response: protocol
                                        cache-ttl: 900
                                        stop-on-error: []
                                        graphql-send-type: detect
                                        websocket-upgrade: false
                                        target-url: >-
                                          $(target-url-restrictedProduction-qrcodes)
                                - otherwise:
                                    - invoke:
                                        version: 2.2.0
                                        title: invokeNativo
                                        backend-type: detect
                                        header-control:
                                          type: blocklist
                                          values: []
                                        parameter-control:
                                          type: allowlist
                                          values: []
                                        http-version: HTTP/1.1
                                        timeout: 60
                                        verb: keep
                                        chunked-uploads: true
                                        persistent-connection: true
                                        cache-response: protocol
                                        cache-ttl: 900
                                        stop-on-error: []
                                        graphql-send-type: detect
                                        websocket-upgrade: false
                                        target-url: $(target-url-qrcodes)
                - gatewayscript:
                    version: 2.0.0
                    title: validateResponse
                    description: Valida la respuesta del nativo
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida la respuesta del nativo\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validateResponse\");\r\n\r\nconst defaultErrorMessage = \"Service unavailable\";\r\nvar ResponseN = context.get(\"message.body\");\r\n\r\nvar version = context.get('api.version');\r\nvar nameAPI = context.get('api.name');\r\nvar operation = context.get('api.operation.path');\r\nvar datetime = context.get('system.datetime');\r\nvar clientId = context.get('client.org.name').toUpperCase();\r\nvar log = \"API:\" + nameAPI + \"- Path:\" + operation + \"- Node\" + \"Validate Response - Version:\" + version + \"- Date:\" + datetime + \"- ClientID:\" + clientId + \"- Request:\" + JSON.stringify(ResponseN);\r\nconsole.error(log);\r\n\r\nconst errors = [];\r\nconst statusCode = context.get('message.status.code');\r\nif (statusCode != 200) {\r\n    context.message.body.readAsJSON(function (error, body) {\r\n        if (error) {\r\n            console.log(\"Error al obtener la respuesta, JSON invalido\");\r\n            console.log(error);\r\n            errors.push(error);\r\n\r\n            const minStatus = \"500\";\r\n            const errorData = {\r\n                minStatus,\r\n                errors\r\n            };\r\n\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        } else {\r\n            console.error(\"ErrorData: \" + JSON.stringify(body.errors));\r\n            let errors = [];\r\n            if (body.errors && body.errors[0].detail && body.errors[0].source && body.errors[0].code) {\r\n                console.error(\"esta ok el body\");\r\n                let messageBody = body.errors[0];\r\n                errors = [\r\n                    {\r\n                        \"code\": statusCode.toString(),\r\n                        \"detail\": messageBody.detail,\r\n                        \"source\": messageBody.source\r\n                    }\r\n                ];\r\n            } else {\r\n                console.error(\"body no esperado\");\r\n                errors = body;\r\n            }\r\n\r\n            const errorData = {\r\n                minStatus: statusCode.toString(),\r\n                errors\r\n            };\r\n\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n"
                - map:
                    version: 2.0.0
                    title: map
                    inputs:
                      input:
                        schema:
                          description: ''
                          type: object
                          properties:
                            data:
                              type: object
                              properties:
                                commerces:
                                  type: array
                                  items:
                                    properties:
                                      childId:
                                        type: string
                                        name: childId
                                      code:
                                        type: string
                                        name: code
                                      fantasyName:
                                        type: string
                                        name: fantasyName
                                      type:
                                        type: string
                                        name: type
                                      logoURL:
                                        type: string
                                        name: logoURL
                                      purchaseOrder:
                                        type: string
                                        name: purchaseOrder
                                      amount:
                                        type: number
                                        name: amount
                                      paymentTypes:
                                        type: array
                                        items:
                                          properties:
                                            code:
                                              type: string
                                              name: code
                                            minShare:
                                              type: number
                                              name: minShare
                                            maxShare:
                                              type: number
                                              name: maxShare
                                            description:
                                              type: string
                                              name: description
                                          type: object
                                        name: paymentTypes
                                      brands:
                                        type: array
                                        items:
                                          type: string
                                        name: brands
                                    type: object
                                  name: commerces
                                transaccion:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                      name: id
                                    timeRemaining:
                                      type: number
                                      name: timeRemaining
                                    totalAmount:
                                      type: number
                                      name: totalAmount
                                    currency:
                                      type: string
                                      name: currency
                                    tip:
                                      type: number
                                      name: tip
                                    donation:
                                      type: number
                                      name: donation
                                    change:
                                      type: number
                                      name: change
                                  name: transaccion
                              name: data
                          example: "{\r\n  \"data\": {\r\n    \"commerces\": [\r\n      {\r\n        \"childId\": \"01ab8739f\",\r\n        \"code\": \"10245120\",\r\n        \"fantasyName\": \"pollos hermanos\",\r\n        \"type\": \"MALL\",\r\n        \"logoURL\": \"https://www.logos.cl\",\r\n        \"purchaseOrder\": \"ada131-da1215\",\r\n        \"amount\": 100.5,\r\n        \"paymentTypes\": [\r\n          {\r\n            \"code\": \"VN\",\r\n            \"minShare\": 1,\r\n            \"maxShare\": 1,\r\n            \"description\": \"Venta Debito\"\r\n          }\r\n        ],\r\n        \"brands\": [\r\n          \"REDCOMPRA\",\r\n          \"PREPAGO\"\r\n        ]\r\n      }\r\n    ],\r\n    \"transaccion\": {\r\n      \"id\": \"00123151545\",\r\n      \"timeRemaining\": 0,\r\n      \"totalAmount\": 100.5,\r\n      \"currency\": \"CLP\",\r\n      \"tip\": 100.5,\r\n      \"donation\": 100.5,\r\n      \"change\": 100.5\r\n    }\r\n  }\r\n}"
                        variable: message.body
                        content: application/json
                    outputs:
                      output:
                        schema:
                          description: ''
                          type: object
                          properties:
                            meta:
                              type: object
                              properties:
                                _version:
                                  type: string
                                  name: _version
                                _rqDateTime:
                                  type: string
                                  name: _rqDateTime
                                _clientId:
                                  type: string
                                  name: _clientId
                                _clientPaymentId:
                                  type: string
                                  name: _clientPaymentId
                              name: meta
                            links:
                              type: object
                              properties:
                                self:
                                  type: string
                                  name: self
                              name: links
                            data:
                              type: object
                              properties:
                                id:
                                  type: string
                                  name: id
                                timeRemaining:
                                  type: number
                                  name: timeRemaining
                                tip:
                                  type: string
                                  name: tip
                                totalAmount:
                                  type: string
                                  name: totalAmount
                                currency:
                                  type: string
                                  name: currency
                                change:
                                  type: string
                                  name: change
                                donation:
                                  type: string
                                  name: donation
                                commerce:
                                  type: array
                                  items:
                                    properties:
                                      paymentTypes:
                                        type: array
                                        items:
                                          properties:
                                            code:
                                              type: string
                                              name: code
                                            minShares:
                                              type: number
                                              name: minShares
                                            maxShares:
                                              type: number
                                              name: maxShares
                                            description:
                                              type: string
                                              name: description
                                          type: object
                                        name: paymentTypes
                                      name:
                                        type: string
                                        name: name
                                      childId:
                                        type: string
                                        name: childId
                                      code:
                                        type: string
                                        name: code
                                      logoURL:
                                        type: string
                                        name: logoURL
                                      type:
                                        type: string
                                        name: type
                                      purchaseOrder:
                                        type: string
                                        name: purchaseOrder
                                      amount:
                                        type: string
                                        name: amount
                                      brands:
                                        type: array
                                        items:
                                          type: string
                                        name: brands
                                    type: object
                                  name: commerce
                              name: data
                          example: "{\r\n  \"meta\": {\r\n    \"_version\": \"2.0.14\",\r\n    \"_rqDateTime\": \"2022-01-25T13:53:40.553Z\",\r\n    \"_clientId\": \"8303713-1\",\r\n    \"_clientPaymentId\": \"58a380dd61fc59070074e070\"\r\n  },\r\n  \"links\": {\r\n    \"self\": \"https://api.transbank.cl/transbank/publico/qrCodes?codeKey=946103610364u44y2842&date=2022-01-20&walletUUID=1234567891011121400\"\r\n  },\r\n  \"data\": {\r\n    \"id\": \"123456789023454310\",\r\n    \"timeRemaining\": 300,\r\n    \"tip\": \"aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9\",\r\n    \"totalAmount\": \"abc5c689edca7c85db0dfee102ef7a5aa4c1bc43714ee2f7\",\r\n    \"currency\": \"abfc2c764ddea5c77db0dfee209ef4a2aa6c3bc23511ea3d9\",\r\n    \"change\": \"aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9\",\r\n    \"donation\": \"aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9\",\r\n    \"commerce\": [\r\n      {\r\n        \"paymentTypes\": [\r\n          {\r\n            \"code\": \"VP\",\r\n            \"minShares\": 0,\r\n            \"maxShares\": 0,\r\n            \"description\": \"Venta Prepago\"\r\n          },\r\n          {\r\n            \"code\": \"VN\",\r\n            \"minShares\": 0,\r\n            \"maxShares\": 0,\r\n            \"description\": \"Venta Normal\"\r\n          },\r\n          {\r\n            \"code\": \"SI\",\r\n            \"minShares\": 3,\r\n            \"maxShares\": 3,\r\n            \"description\": \"Tres Cuotas Sin Interes\"\r\n          },\r\n          {\r\n            \"code\": \"VC\",\r\n            \"minShares\": 2,\r\n            \"maxShares\": 24,\r\n            \"description\": \"Venta N Cuotas\"\r\n          }\r\n        ],\r\n        \"name\": \"Recaudador\",\r\n        \"childId\": \"a1001\",\r\n        \"code\": \"597038358200\",\r\n        \"logoURL\": \"https://web1qa.test.transbank.cl:8443/imagingservlet/LogoServlet?commerceId=597038358200\",\r\n        \"type\": \"MALL\",\r\n        \"purchaseOrder\": \"123456789\",\r\n        \"amount\": \"adf3d877eefb8d69ec1fgee213ff8b6bb5d2cd54729fb2f0\",\r\n        \"brands\": [\r\n          \"REDCOMPRA\",\r\n          \"VISA\",\r\n          \"MASTERCARD\",\r\n          \"DINERS\",\r\n          \"AMEX\",\r\n          \"MAGNA\"\r\n        ]\r\n      },\r\n      {\r\n        \"paymentTypes\": [\r\n          {\r\n            \"code\": \"VN\",\r\n            \"minShares\": 0,\r\n            \"maxShares\": 0,\r\n            \"description\": \"Venta Normal\"\r\n          },\r\n          {\r\n            \"code\": \"SI\",\r\n            \"minShares\": 3,\r\n            \"maxShares\": 3,\r\n            \"description\": \"Tres Cuotas Sin Interes\"\r\n          },\r\n          {\r\n            \"code\": \"VC\",\r\n            \"minShares\": 2,\r\n            \"maxShares\": 24,\r\n            \"description\": \"Venta Cuotas\"\r\n          }\r\n        ],\r\n        \"name\": \"Empresa Telefonia\",\r\n        \"code\": \"597038358201\",\r\n        \"logoURL\": \"https://web1qa.test.transbank.cl:8443/imagingservlet/LogoServlet?commerceId=597038358201\",\r\n        \"type\": \"NORMAL\",\r\n        \"childId\": \"a1002\",\r\n        \"purchaseOrder\": \"987654321\",\r\n        \"amount\": \"aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9\",\r\n        \"brands\": [\r\n          \"REDCOMPRA\",\r\n          \"VISA\",\r\n          \"MASTERCARD\",\r\n          \"DINERS\",\r\n          \"AMEX\"\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
                        variable: message.body
                        content: application/json
                    actions:
                      - set: output.meta._version
                        value: context.get("api.version");
                      - set: output.meta._rqDateTime
                        value: context.get("system.datetime")
                      - set: output.meta._clientId
                        value: context.get('client.org.name').toUpperCase();
                      - set: output.meta._clientPaymentId
                        value: >-
                          context.get('request.headers.X-Global-Transaction-ID');
                      - set: output.data
                        from: input.data.transaccion
                      - create: output.data.commerce
                        foreach: input.data.commerces
                        from: input.data.commerces
                        actions:
                          - create: paymentTypes
                            foreach: paymentTypes
                            from: paymentTypes
                            actions:
                              - set: code
                                from: code
                              - set: minShares
                                from: minShare
                              - set: maxShares
                                from: maxShare
                              - set: description
                                from: description
                          - set: name
                            from: fantasyName
                          - set: childId
                            from: childId
                          - set: code
                            from: code
                          - set: logoURL
                            from: logoURL
                          - set: type
                            from: type
                          - set: purchaseOrder
                            from: purchaseOrder
                          - set: amount
                            from: amount
                          - create: brands
                            foreach: brands
                            from: brands
                            actions:
                              - set: $item
                                from:
                                  - $item
                                  - $item
                    options:
                      mapEmulateV4EmptyJSONObject: false
                      mapEmulateV4DefaultRequiredProps: false
                      mapEnablePostProcessingJSON: false
                      mapReferenceLimit: 1
                - gatewayscript:
                    version: 2.0.0
                    title: hmacGeneratorValidate
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que firma el body a enviar al consumidor\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia HmacGenerator\");\r\n const crypto = require('crypto');\r\n const body = context.get('message.body');\r\n\r\n const valueKey = context.get('ctx.key');\r\n const KeyValue = valueKey;\r\n console.error(KeyValue);\r\n\r\n let key = Buffer.from(Buffer.from(KeyValue,'base64').toString('ascii')); \r\n let hmacGenerated = crypto.createHmac('hmac-sha256', key);\r\n let hmacResult = hmacGenerated.update(JSON.stringify(body.data)).digest('base64');\r\n\r\n context.set('message.headers.X-App-Sign', hmacResult);"
                - gatewayscript:
                    version: 2.0.0
                    title: encryptField
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript encargado de encriptar la data sensible\r\n*               con la llave de trabajo entregada por el consumidor\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia encryptField\");\r\nconst crypto = require('crypto');\r\n\r\nlet body = context.get('message.body');\r\nconsole.error(\"body:\"+JSON.stringify(body));\r\nlet transaction = body.data.commerce;\r\nlet valueKey = context.get('ctx.key');\r\n\r\nlet key = Buffer.from(Buffer.from(valueKey,'base64').toString('ascii'));\r\n\r\n\r\nlet tip = body.data.tip;\r\nlet totalAmount = body.data.totalAmount;\r\nlet currency = body.data.currency;\r\nlet change = body.data.change;\r\nlet donation = body.data.donation;\r\n\r\n\r\nfor (var i = 0; i < transaction.length; i+=1) {\r\n    let amount = transaction[i].amount;\r\n    body.data.commerce[i].amount = cipherField(amount);\r\n}\r\n\r\n\r\nif(tip || tip === 0 ){\r\n    body.data.tip = cipherField(tip);\r\n}\r\n\r\nif(totalAmount || totalAmount === 0 ){\r\n\r\n    body.data.totalAmount = cipherField(totalAmount);\r\n}\r\n\r\nif(currency){\r\n    \r\n    body.data.currency = cipherField(currency);\r\n}\r\n\r\nif(change || change === 0){\r\n    \r\n    body.data.change = cipherField(change);\r\n}\r\n\r\nif(donation || donation === 0){\r\n    \r\n    body.data.donation = cipherField(donation);\r\n}\r\n\r\n\r\n\r\ncontext.set(\"message.body\", body);\r\n\r\n\r\nfunction cipherField(value){\r\n    let iv = new Buffer(crypto.randomBytes(8).toString('hex'));\r\n    let cipher= crypto.createCipheriv('aes256-cbc', key, iv);\r\n    cipher.update(value+\"\",'utf8');\r\n    let encrypt = cipher.final('hex');\r\n    return  encrypt + iv.toString('utf8');\r\n}"
                - gatewayscript:
                    version: 2.0.0
                    title: insertionSelf
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que registra el valor de la propiedad \r\n                 self de su body.\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia insertionSelft\");\r\nconst path =  `https://${context.get('request.headers.HostAPIC')?context.get('request.headers.HostAPIC'):context.get('api.endpoint.hostname')}/${context.get('api.org.name')}/${context.get('env.path')}/qr-codes`;\r\n\r\nlet codeKeyParameter = context.get('request.parameters.codeKey');\r\nlet simpleCodeParameter = context.get('request.parameters.simpleCode');\r\nlet userIdParameter = context.get('request.parameters.userId');\r\n\r\nlet codeKey = codeKeyParameter ? codeKeyParameter.values.join(''): undefined;\r\nlet simpleCode = simpleCodeParameter ?  simpleCodeParameter.values.join(''): undefined;\r\nlet userId = userIdParameter ? userIdParameter.values.join(''): undefined;\r\nlet codeKeyParameters =\"\";\r\nlet simpleCodeParameters= \"\";\r\nlet userIdParameters=\"\";\r\n\r\nif(codeKey){\r\n    codeKeyParameters =  `codeKey=${encodeURI(codeKey)}`;\r\n}\r\nif(simpleCode){\r\n    simpleCodeParameters = `simpleCode=${simpleCode}`;\r\n}\r\nif(userId){\r\n    userIdParameters =  `&userId=${userId}`;\r\n}\r\n\r\n\r\nlet messageBody = context.get(\"message.body\");\r\nconst parameters = `?${codeKeyParameters}${simpleCodeParameters}${userIdParameters}`;\r\n\r\nmessageBody.links = {\r\n    \"self\": `${path}${parameters}`\r\n};\r\n\r\ncontext.set(\"message.body\", messageBody);"
            - condition: ($operationPath() = '/qr-payments' and $httpVerb() = 'POST')
              execute:
                - gatewayscript:
                    version: 2.0.0
                    title: validateHeader
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida los headers enviados\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nconsole.error(\"Validacion de headers\");\r\n\r\nlet key = context.get('request.headers.X-App-Key');\r\nlet hmac = context.get('request.headers.X-App-Sign');\r\nlet paymentId = context.get('request.headers.X-Client-Payment-Id');\r\nlet errors = [];\r\n\r\naddValidation(\"X-App-Key\",\r\n    (!key),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": \"El header X-App-Key es obligatorio\",\r\n        \"source\": {\" pointer\": \"X-App-Key\" }\r\n    });\r\n\r\naddValidation(\"X-App-Sign\",\r\n    (!hmac),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": \"El header X-App-Sign es obligatorio\",\r\n        \"source\": {\" pointer\": \"X-App-Sign\" }\r\n    });\r\n\r\naddValidation(\"X-Client-Payment-Id\",\r\n    (!paymentId),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": \"El header X-Client-Payment-Id es obligatorio\",\r\n        \"source\": {\" pointer\": \"X-Client-Payment-Id\" }\r\n    });\r\n\r\naddValidation(\"X-Client-Payment-Id\",\r\n    (isAplhaNumericFormat(paymentId)),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": \"El header X-Client-Payment-Id esta mal formado\",\r\n        \"source\": {\" pointer\": \"X-Client-Payment-Id\" }\r\n    });\r\n\r\nif(errors.length > 0){\r\n    throwError();\r\n}\r\n\r\n/***\r\n * Adiciona un error de validación a la estructura general de errores\r\n * @param field\r\n * @param isError\r\n * @param errorObj\r\n * @param isImmediate\r\n */\r\nfunction addValidation(field, isError, errorObj, isImmediate) {\r\n    console.info(\"Verificacion de validacion campo %s \", field);\r\n    if (isError) {\r\n        console.info(\"Falla de validacion identificada en %s \", field);\r\n        errors.push(errorObj);\r\n    }\r\n}\r\n\r\nfunction isAplhaNumericFormat(value){\r\n    \r\n    let reg = /^[a-zA-Z0-9]+$/;\r\n    if(reg.test(value)){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/*** \r\n* Se utiliza apim.error para lanzar el error \r\n*/\r\nfunction throwError() {\r\n    if (errors) {\r\n        const minStatus = errors.reduce((min, err) => err.code < min ? err.code : min, errors[0].code);\r\n        const errorData = {\r\n            minStatus,\r\n            errors\r\n        };\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ParametersException\", defaultErrorMessage);\r\n    }\r\n}"
                    description: GatewayScript que valida los headers enviados
                - xslt:
                    version: 2.1.0
                    title: decipherKey
                    input: false
                    serialize-output: false
                    source: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"1.0\"\r\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    xmlns:dp=\"http://www.datapower.com/extensions\"\r\n    xmlns:func=\"http://exslt.org/functions\"\r\n    xmlns:apigw=\"http://www.ibm.com/xmlns/datapower/2017/11/apigateway\"\r\n    extension-element-prefixes=\"apigw\"\r\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <xsl:include href=\"store:///dp/msgcat/xslt.xml.xsl\"/>\r\n    <xsl:template match=\"/\">\r\n        <xsl:variable name=\"key\">\r\n            <xsl:value-of select=\"apigw:get-header('request','X-App-Key')\"/>\r\n        </xsl:variable>\r\n        <xsl:variable name=\"cryptoKey\">\r\n            <xsl:value-of select=\"apigw:get-variable('api.properties.cryptoKey')\"/>\r\n        </xsl:variable>\r\n        <apigw:set-variable name=\"'ctx.key'\" value=\"dp:decrypt-key($key,$cryptoKey,'http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p','','http://www.w3.org/2001/04/xmlenc#sha256')\"/>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
                    compile-settings: {}
                - gatewayscript:
                    version: 2.0.0
                    title: messageIntegrityAuthorize
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida la integridad del body enviado\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\n\r\nconsole.error(\"Inicia messageIntegrity\");\r\nconst crypto = require('crypto');\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nconst valueKey = context.get('ctx.key');\r\nvar errors = [];\r\ncontext.message.body.readAsJSON(function (error, body) {\r\n    var hmac = context.request.header.get('X-App-Sign');\r\n    var key = Buffer.from(Buffer.from(valueKey, 'base64').toString('ascii'));\r\n    console.error(key);\r\n    var hmacGenerated = crypto.createHmac('hmac-sha256', key);\r\n\r\n    console.error(\"Body: \" + body.data.toString());\r\n\r\n    var hmacResult = hmacGenerated.update(JSON.stringify(body.data)).digest('base64');\r\n    console.error(\"hmac: \" + hmac);\r\n    console.error(\"hmacResult: \" + hmacResult);\r\n    console.error(\"descrifrado OK\");\r\n    addValidation(\"cifrado\",\r\n        (hmac !== hmacResult),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `No se ha podido validar la integridad del body enviado`,\r\n            \"source\": { \"pointer\": \"body\" }\r\n        });\r\n\r\n    if (errors.length > 0) {\r\n        throwError();\r\n    }\r\n\r\n\r\n});\r\n\r\n\r\n/***\r\n * Adiciona un error de validación a la estructura general de errores\r\n * @param field\r\n * @param isError\r\n * @param errorObj\r\n * @param isImmediate\r\n */\r\nfunction addValidation(field, isError, errorObj, isImmediate) {\r\n    console.info(\"Verificacion de validacion campo %s \", field);\r\n    if (isError) {\r\n        console.info(\"Falla de validacion identificada en %s \", field);\r\n        errors.push(errorObj);\r\n    }\r\n}\r\n\r\n/*** \r\n* Se utiliza apim.error para lanzar el error \r\n*/\r\nfunction throwError() {\r\n    if (errors) {\r\n        const minStatus = errors.reduce((min, err) => err.code < min ? err.code : min, errors[0].code);\r\n        const errorData = {\r\n            minStatus,\r\n            errors\r\n        };\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ParametersException\", defaultErrorMessage);\r\n    }\r\n}"
                    description: GatewayScript que valida la integridad del body enviado
                - gatewayscript:
                    version: 2.0.0
                    title: validateField
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida la existencia de los parametros\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\n\r\nconsole.error(\"Inicia validateField\");\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nvar errors = [];\r\n\r\nconst paymentTypeValues = context.get(\"api.properties.paymentTypeValues\");\r\nconst allowedPaymentTypeValues = paymentTypeValues.split(\",\");\r\n\r\nconst cardBrandValues = context.get(\"api.properties.cardBrandValues\");\r\nconst allowedcardBrandValues = cardBrandValues.split(\",\");\r\ncontext.set('ctx.tef', 0);\r\n\r\ncontext.message.body.readAsJSON(function (error, body) {\r\n    var attributes = body.data;\r\n    var card = attributes.card;\r\n    var tef = attributes.tef;\r\n    var paymentType = attributes.paymentType;\r\n    \r\n    console.error(attributes);\r\n\r\n    var userSelection = [];\r\n    userSelection = attributes.userSelection;\r\n    console.error(userSelection);\r\n    //var jsronrq = JSON.parse(userSelection[0]);\r\n\r\n    addValidation(\"paymentType\",\r\n        !attributes.paymentType,\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": \"el paymentType es requerido\",\r\n            \"source\": { \"pointer\": \"paymentType\" }\r\n        });\r\n\r\n    addValidation(\"paymentType\",\r\n        !allowedPaymentTypeValues.includes(attributes.paymentType),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": \"El campo paymentType tiene un valor erroneo\",\r\n            \"source\": { \"pointer\": \"paymentType\" }\r\n        });\r\n\r\n    var pay = false;\r\n    addValidation(\"id\",\r\n        !(body.data.id),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El id es requerido`,\r\n            \"source\": { \"pointer\": \"id\" }\r\n        });\r\n\r\n\r\n    for (var i = 0; i < userSelection.length; i++) {\r\n        if (userSelection[i].paymentType == null || userSelection[i].paymentType == \"\") {\r\n\r\n            pay = true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addValidation(\"paymentType invalido\",\r\n        (pay == true),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El paymentType es requerido`,\r\n            \"source\": { \"pointer\": \"paymentType\" }\r\n        });\r\n\r\n\r\n    addValidation(\"notifyURL\",\r\n        (!attributes.notifyURL),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El notifyURL es obligatorio`,\r\n            \"source\": { \"pointer\": \"notifyURL\" }\r\n        });\r\n\r\n    if (card != null && paymentType == \"card\") {\r\n        console.error(\"Es trx normal\");\r\n        if(tef){\r\n            addValidation(\"tef\",\r\n            tef,\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": \"El objeto tef no es requerido en trx tipo card\",\r\n                \"source\": {\"pointer\": \"tef\"}\r\n            },\r\n            true\r\n            );\r\n        }\r\n        addValidation(\"cardNumber\",\r\n            (!card.cardNumber),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El cardNumber es obligatorio`,\r\n                \"source\": { \"pointer\": \"cardNumber\" }\r\n            });\r\n\r\n\r\n        addValidation(\"cardType\",\r\n            (!card.cardType),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El cardType es obligatorio`,\r\n                \"source\": { \"pointer\": \"cardType\" }\r\n            });\r\n\r\n\r\n        addValidation(\"cardBrand\",\r\n            (!card.cardBrand),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El cardBrand es obligatorio`,\r\n                \"source\": { \"pointer\": \"cardBrand\" }\r\n            });\r\n\r\n        addValidation(\"cardBrand\",\r\n            !allowedcardBrandValues.includes(card.cardBrand),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": \"El campo cardBrand tiene un valor erroneo\",\r\n                \"source\": { \"pointer\": \"cardBrand\" }\r\n            });\r\n\r\n\r\n        addValidation(\"cardNumber\",\r\n            ((card.cardNumber + \"\").length > 80),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El cardNumber es invalido`,\r\n                \"so
                - switch:
                    version: 2.0.0
                    title: switch
                    case:
                      - condition: (ctx.tef=1)
                        execute:
                          - gatewayscript:
                              version: 2.0.0
                              title: desencryptFiled
                              description: >-
                                GatewayScript que desencripta los datos
                                sensibles
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que desencripta los datos sensibles \r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia desencryptField tef\");\r\nconst crypto = require('crypto');\r\n\r\nvar valueKey = context.get('ctx.key');\r\n\r\nvar key = Buffer.from(Buffer.from(valueKey,'base64').toString('ascii'));\r\ncontext.message.body.readAsJSON(function(error, body) {\r\n\t\r\n\tvar paymentTef = body.data.tef;\r\n\tvar token = paymentTef.token;\r\n\tvar numberAccount = paymentTef.numberAccount;\r\n\tvar typeAccount = paymentTef.typeAccount;\r\n\tvar emisorCodeCmf = paymentTef.emisorCodeCmf;\r\n\tvar idWallet = paymentTef.idWallet;\r\n\tvar rutUser = paymentTef.rutUser;\r\n\tvar nameUser = paymentTef.nameUser;\r\n\tvar phoneNumber = paymentTef.phoneNumber;\r\n\tvar emailUser = paymentTef.emailUser;\r\n\r\n context.set('ctx.token', token ?  decipherField(token): undefined);\r\n context.set('ctx.numberAccount', numberAccount ?  decipherField(numberAccount): undefined);\r\n context.set('ctx.typeAccount', typeAccount ?  decipherField(typeAccount): undefined);\r\n context.set('ctx.emisorCodeCmf', emisorCodeCmf ?  decipherField(emisorCodeCmf): undefined);\r\n context.set('ctx.idWallet', idWallet ?  decipherField(idWallet): undefined);\r\n context.set('ctx.rutUser', rutUser ?  decipherField(rutUser): undefined);\r\n context.set('ctx.nameUser', nameUser ?  decipherField(nameUser): undefined);\r\n context.set('ctx.phoneNumber', phoneNumber ?  decipherField(phoneNumber): undefined);\r\n context.set('ctx.emailUser', emailUser ?  decipherField(emailUser): undefined);\r\n});\r\n\r\n\r\nfunction decipherField(value){\r\n\r\n    let iv = Buffer.from(value.substring(value.length-16,value.length));\r\n    let valueEncrypt = value.substring(0,value.length-16);\r\n    let decipher = crypto.createDecipheriv('aes256-cbc', key, iv);\r\n    decipher.update(valueEncrypt, 'hex');\r\n    let originalValue = decipher.final('utf8');\r\n    return originalValue.trim();\r\n}"
                          - gatewayscript:
                              version: 2.0.0
                              title: validateBody
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida cada propiedad del body segun\r\n*               los requerimientos de contrato\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validateBody tef\");\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nlet valuesPaymentTypes = context.get('api.properties.valuesPaymentTypes').split(\",\");\r\nlet maxTransactionId = context.get('api.properties.maxTransactionId');\r\nlet maxNotifyUrl = context.get('api.properties.maxNotifyUrl');\r\nlet maxFees = context.get('api.properties.maxFees');\r\nlet maxPaymentType = context.get('api.properties.maxPaymentType');\r\nlet minUserId = context.get('api.properties.minUserId');\r\nlet maxUserId = context.get('api.properties.maxUserId');\r\nlet valueSalePrepaid = context.get('api.properties.valueSalePrepaid');\r\nlet valueSaleDebit = context.get('api.properties.valueSaleDebit');\r\n\r\nlet maxToken = context.get('api.properties.maxToken');\r\nlet maxNumberAccount = context.get('api.properties.maxNumberAccount');\r\nlet maxTypeAccount = context.get('api.properties.maxTypeAccount');\r\nlet maxEmisorCodeCmf = context.get('api.properties.maxEmisorCodeCmf');\r\nlet maxRutUser = context.get('api.properties.maxRutUser');\r\nlet maxPhoneNumber = context.get('api.properties.maxPhoneNumber');\r\nlet maxEmailUser = context.get('api.properties.maxEmailUser');\r\nlet maxNameUser = context.get('api.properties.maxNameUser');\r\n\r\nlet token = context.get('ctx.token');\r\nlet numberAccount = context.get('ctx.numberAccount');\r\nconsole.error(\"token: \" + token);\r\nlet typeAccount = context.get('ctx.typeAccount');\r\nlet emisorCodeCmf = context.get('ctx.emisorCodeCmf');\r\nlet rutUser = context.get('ctx.rutUser');\r\nlet nameUser = context.get('ctx.nameUser');\r\nlet phoneNumber = context.get('ctx.phoneNumber');\r\nlet emailUser = context.get('ctx.emailUser');\r\ncontext.set('ctx.tokenEmpty', 0);\r\n\r\nconst TypeAccountValues = context.get(\"api.properties.TypeAccountValues\");\r\nconst allowedTypeAccountValues = TypeAccountValues.split(\",\");\r\n\r\nvar errors = [];\r\ncontext.message.body.readAsJSON(function (error, body) {\r\n    console.error(\"Inicia lectura de body.\");\r\n    var attributes = body.data;\r\n    var userSelection = attributes.userSelection;\r\n    var userId = context.get('request.headers.X-User-Id');\r\n\r\n    var flowId = context.get('request.headers.X-Client-Payment-Id');\r\n\r\n    context.set(\"message.headers.x-flow-id\", flowId);\r\n    context.set('ctx.tokenEmpty', 0);\r\n\r\n    if (valuesPaymentTypes.includes(userSelection.paymentType) && (userSelection.paymentType !== valueSaleDebit && userSelection.paymentType !== valueSalePrepaid)) {\r\n        addValidation(\"shares\",\r\n            (!userSelection.shares),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El campo shares es requerido para las transacciones de credito`,\r\n                \"source\": { \"pointer\": \"shares\" }\r\n            });\r\n    }\r\n\r\n    if (body.data.id) {\r\n        context.set(\"ctx.id\", body.data.id);\r\n        addValidation(\"id\",\r\n            (body.data.id.length > maxTransactionId),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El id ${body.data.id}  debe ser de maximo ${maxTransactionId} caracteres`,\r\n                \"source\": { \"pointer\": \"id\" }\r\n            });\r\n\r\n        addValidation(\"id\",\r\n            isAplhaNumericFormat(body.data.id),\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El id ${body.data.id}  debe ser alfanumerico`,\r\n                \"source\": { \"pointer\": \"id\" }\r\n            });\r\n    }\r\n\r\n\r\n    if (userId || userId === \"\") {\r\n        addValidation(\"userId\",\r\n            isAplhaNumericFormat(userId), // no cumple formato alfanumerico\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El userId ${userId}  debe ser alfanumerico`,\r\n                \"source\": { \"pointer\": \"userId\" }\r\n            });\r\n\r\n        addValidation(\"userId\",\r\n            (userId.length < minUserId || userId.length > maxUserId), // no que el numero de caracteres este entre el rango\r\n            {\r\n                \"code\": \"422\",\r\n                \"detail\": `El userId ${userId}  
                              description: >-
                                GatewayScript que valida cada propiedad del body
                                segun los requerimientos de contrato
                          - gatewayscript:
                              version: 2.0.0
                              title: cardTypeMapping
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que setea el tipo de tarjeta \r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\n\r\nconsole.error(\"Inicia cardTypeMappiong tef\");\r\ncontext.message.body.readAsJSON(function(error, body) {\r\n    var attributes = body.data;\r\n    var userSelection = attributes.userSelection;\r\n    \r\n    var cardTypeMap = JSON.parse(context.get('api.properties.cardTypeMap'));\r\n    console.error(\"cardTypeMap\"+cardTypeMap);\r\n    \r\n    var cardType;\r\n    \r\n    if(cardTypeMap.hasOwnProperty(userSelection.paymentType)){\r\n        cardType = cardTypeMap[userSelection.paymentType];\r\n    }else{\r\n        cardType = cardTypeMap.DEFAULT;\r\n    }\r\n    \r\n    context.set('ctx.cardType', cardType);\t\r\n    console.error(cardType);\t\r\n    \t\r\n});\r\n\r\n"
                          - switch:
                              version: 2.0.0
                              title: switch
                              case:
                                - condition: (ctx.tokenEmpty=1)
                                  execute:
                                    - map:
                                        version: 2.0.0
                                        title: map
                                        inputs:
                                          input:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                meta:
                                                  type: object
                                                  properties:
                                                    _rqDateTime:
                                                      type: string
                                                      name: _rqDateTime
                                                  name: meta
                                                data:
                                                  type: object
                                                  properties:
                                                    id:
                                                      type: string
                                                      name: id
                                                    notifyURL:
                                                      type: string
                                                      name: notifyURL
                                                    paymentType:
                                                      type: string
                                                      name: paymentType
                                                    userSelection:
                                                      type: array
                                                      items:
                                                        properties:
                                                          paymentType:
                                                            type: string
                                                            name: paymentType
                                                          shares:
                                                            type: number
                                                            name: shares
                                                          childId:
                                                            type: string
                                                            name: childId
                                                        type: object
                                                      name: userSelection
                                                    card:
                                                      type: object
                                                      properties:
                                                        cardNumber:
                                                          type: string
                                                          name: cardNumber
                                                        expirationDate:
                                                          type: number
                                                          name: expirationDate
                                                        cavv:
                                                          type: string
                                                          name: cavv
                                                        vci:
                                                          type: string
                                                          name: vci
                                                        eci:
                                                          type: string
                                                          name: eci
                                                        cvv:
                                                          type: string
                                                          name: cvv
                                                        cardType:
                                                          type: string
                                                          name: cardType
                                                        cardBrand:
                                                          type: string
                                                          name: cardBrand
                                                      name: card
                                                    tef:
                                                      type: object
                                                      properties:
                                                        token:
                                                          type: string
                                                          name: token
                                                        numberAccount:
                                                          type: string
                                                          name: numberAccount
                                                        typeAccount:
                                                          type: string
                                                          name: typeAccount
                                                        emisorCodeCmf:
                                                          type: string
                                                          name: emisorCodeCmf
                                                        rutUser:
                                                          type: string
                                                          name: rutUser
                                                        nameUser:
                                                          type: string
                                                          name: nameUser
                                                        phoneNumber:
                                                          type: string
                                                          name: phoneNumber
                                                        emailUser:
                                                          type: string
                                                          name: emailUser
                                                      name: tef
                                                  name: data
                                              example: "{\r\n  \"meta\": {\r\n    \"_rqDateTime\": \"2018-02-10T09:30Z\"\r\n  },\r\n  \"data\": {\r\n    \"id\": \"123456789023454310000\",\r\n    \"notifyURL\": \"https://internal.banco.cl/callback\",\r\n    \"paymentType\": \"card|tef\",\r\n    \"userSelection\": [\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8b\"\r\n      },\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8bn\"\r\n      }\r\n    ],\r\n    \"card\": {\r\n      \"cardNumber\": \"1234567812345678\",\r\n      \"expirationDate\": 202312,\r\n      \"cavv\": \"964\",\r\n      \"vci\": \"147\",\r\n      \"eci\": \"258\",\r\n      \"cvv\": \"931\",\r\n      \"cardType\": \"DEBIT\",\r\n      \"cardBrand\": \"MAGNA\"\r\n    },\r\n    \"tef\": {\r\n      \"token\": \"uP2mJRg3samMQslR6DJ2\",\r\n      \"numberAccount\": \"01234567890\",\r\n      \"typeAccount\": \"020|030|040\",\r\n      \"emisorCodeCmf\": \"0017\",\r\n      \"rutUser\": \"444-8\",\r\n      \"nameUser\": \"ana melo\",\r\n      \"phoneNumber\": \"986756324\",\r\n      \"emailUser\": \"ana.melo@gmail.com\"\r\n    }\r\n  }\r\n}"
                                            variable: message.body
                                            content: application/json
                                        outputs:
                                          output:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                rutUsuario:
                                                  type: string
                                                  name: rutUsuario
                                                numeroCuenta:
                                                  type: string
                                                  name: numeroCuenta
                                                cdgEmisorCmf:
                                                  type: string
                                                  name: cdgEmisorCmf
                                                tipoCuenta:
                                                  type: string
                                                  name: tipoCuenta
                                                nombreUsuario:
                                                  type: string
                                                  name: nombreUsuario
                                                telefono:
                                                  type: string
                                                  name: telefono
                                                email:
                                                  type: string
                                                  name: email
                                              example: "{\r\n  \"rutUsuario\": \"15789495-3\",\r\n  \"numeroCuenta\": \"123892342389\",\r\n  \"cdgEmisorCmf\": \"0016\",\r\n  \"tipoCuenta\": \"10|20|40\",\r\n  \"nombreUsuario\": \"Luis Manuel Rodriguez Fernandez\",\r\n  \"telefono\": \"+56214578411\",\r\n  \"email\": \"luispf@email.com\"\r\n}"
                                            variable: message.body
                                            content: application/json
                                        actions:
                                          - set: output.numeroCuenta
                                            from: input.data.tef.numberAccount
                                          - set: output.tipoCuenta
                                            from: input.data.tef.typeAccount
                                          - set: output.cdgEmisorCmf
                                            from: input.data.tef.emisorCodeCmf
                                          - set: output.rutUsuario
                                            from: input.data.tef.rutUser
                                          - set: output.nombreUsuario
                                            from: input.data.tef.nameUser
                                          - set: output.telefono
                                            from: input.data.tef.phoneNumber
                                          - set: output.email
                                            from: input.data.tef.emailUser
                                    - switch:
                                        version: 2.0.0
                                        title: switch
                                        case:
                                          - condition: (ctx.mock=1)
                                            execute:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeGeneraTokenMock
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: POST
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: $(target-url-Generate-token)
                                          - otherwise:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeGeneraToken
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: keep
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: www.pordefinir.com
                                    - gatewayscript:
                                        version: 2.0.0
                                        title: validateResponse
                                        source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida el response del nativo\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validateResponse tokenGenerado tef\");\r\n\r\nconst defaultErrorMessage = \"Service unavailable\";\r\nconst errors = [];\r\n\r\nconst statusCode = context.message.statusCode;\r\nconsole.error(`Status code de respuesta: %s`, statusCode);\r\n\r\nif (statusCode != 200) {\r\n    context.message.body.readAsJSON(function (error, body) {\r\n        if (error) {\r\n            console.log(\"Error al obtener la respuesta, JSON invalido\");\r\n            console.log(error);\r\n            errors.push(error);\r\n\r\n            const minStatus = \"500\";\r\n            const errorData = {\r\n                minStatus,\r\n                errors\r\n            };\r\n\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        } else {\r\n            let errors = [];\r\n            if (body.internalCode && body.description && body.requestId) {\r\n                errors = [{\r\n                    \"internalCode\": statusCode.toString(),\r\n                    \"description\": body.description,\r\n                    \"requestId\": body.requestId\r\n                }];\r\n            } else {\r\n                errors = body;\r\n            }\r\n\r\n            const errorData = {\r\n                minStatus: statusCode.toString(),\r\n                errors\r\n            };\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        }\r\n    });\r\n}"
                                    - map:
                                        version: 2.0.0
                                        title: map
                                        inputs:
                                          input:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                internalCode:
                                                  type: number
                                                  name: internalCode
                                                description:
                                                  type: string
                                                  name: description
                                                requestId:
                                                  type: string
                                                  name: requestId
                                                tokenCuenta:
                                                  type: string
                                                  name: tokenCuenta
                                                numeroCuenta:
                                                  type: string
                                                  name: numeroCuenta
                                              example: "{\r\n  \"internalCode\": 0,\r\n  \"description\": \"OK\",\r\n  \"requestId\": \"1675350587484\",\r\n  \"tokenCuenta\": \"string\",\r\n  \"numeroCuenta\": \"2389\"\r\n}"
                                            variable: message.body
                                            content: application/json
                                          body:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                meta:
                                                  type: object
                                                  properties:
                                                    _rqDateTime:
                                                      type: string
                                                      name: _rqDateTime
                                                  name: meta
                                                data:
                                                  type: object
                                                  properties:
                                                    id:
                                                      type: string
                                                      name: id
                                                    notifyURL:
                                                      type: string
                                                      name: notifyURL
                                                    paymentType:
                                                      type: string
                                                      name: paymentType
                                                    userSelection:
                                                      type: array
                                                      items:
                                                        properties:
                                                          paymentType:
                                                            type: string
                                                            name: paymentType
                                                          shares:
                                                            type: number
                                                            name: shares
                                                          childId:
                                                            type: string
                                                            name: childId
                                                        type: object
                                                      name: userSelection
                                                    card:
                                                      type: object
                                                      properties:
                                                        cardNumber:
                                                          type: string
                                                          name: cardNumber
                                                        expirationDate:
                                                          type: number
                                                          name: expirationDate
                                                        cavv:
                                                          type: string
                                                          name: cavv
                                                        vci:
                                                          type: string
                                                          name: vci
                                                        eci:
                                                          type: string
                                                          name: eci
                                                        cvv:
                                                          type: string
                                                          name: cvv
                                                        cardType:
                                                          type: string
                                                          name: cardType
                                                        cardBrand:
                                                          type: string
                                                          name: cardBrand
                                                      name: card
                                                    tef:
                                                      type: object
                                                      properties:
                                                        token:
                                                          type: string
                                                          name: token
                                                        numberAccount:
                                                          type: string
                                                          name: numberAccount
                                                        typeAccount:
                                                          type: string
                                                          name: typeAccount
                                                        emisorCodeCmf:
                                                          type: string
                                                          name: emisorCodeCmf
                                                        rutUser:
                                                          type: string
                                                          name: rutUser
                                                        nameUser:
                                                          type: string
                                                          name: nameUser
                                                        phoneNumber:
                                                          type: string
                                                          name: phoneNumber
                                                        emailUser:
                                                          type: string
                                                          name: emailUser
                                                      name: tef
                                                  name: data
                                              example: "{\r\n  \"meta\": {\r\n    \"_rqDateTime\": \"2018-02-10T09:30Z\"\r\n  },\r\n  \"data\": {\r\n    \"id\": \"123456789023454310000\",\r\n    \"notifyURL\": \"https://internal.banco.cl/callback\",\r\n    \"paymentType\": \"card|tef\",\r\n    \"userSelection\": [\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8b\"\r\n      },\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8bn\"\r\n      }\r\n    ],\r\n    \"card\": {\r\n      \"cardNumber\": \"1234567812345678\",\r\n      \"expirationDate\": 202312,\r\n      \"cavv\": \"964\",\r\n      \"vci\": \"147\",\r\n      \"eci\": \"258\",\r\n      \"cvv\": \"931\",\r\n      \"cardType\": \"DEBIT\",\r\n      \"cardBrand\": \"MAGNA\"\r\n    },\r\n    \"tef\": {\r\n      \"token\": \"uP2mJRg3samMQslR6DJ2\",\r\n      \"numberAccount\": \"01234567890\",\r\n      \"typeAccount\": \"020|030|040\",\r\n      \"emisorCodeCmf\": \"0017\",\r\n      \"rutUser\": \"444-8\",\r\n      \"nameUser\": \"ana melo\",\r\n      \"phoneNumber\": \"986756324\",\r\n      \"emailUser\": \"ana.melo@gmail.com\"\r\n    }\r\n  }\r\n}"
                                            variable: request.body
                                        outputs:
                                          output:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                notifyUrl:
                                                  type: string
                                                  name: notifyUrl
                                                paymentType:
                                                  type: string
                                                  name: paymentType
                                                userSelection:
                                                  type: array
                                                  items:
                                                    properties:
                                                      share:
                                                        type: number
                                                        name: share
                                                      paymentType:
                                                        type: string
                                                        name: paymentType
                                                      childId:
                                                        type: string
                                                        name: childId
                                                    type: object
                                                  name: userSelection
                                                card:
                                                  type: object
                                                  properties:
                                                    cardNumber:
                                                      type: string
                                                      name: cardNumber
                                                    cardType:
                                                      type: string
                                                      name: cardType
                                                    cardBrand:
                                                      type: string
                                                      name: cardBrand
                                                    expirationDate:
                                                      type: string
                                                      name: expirationDate
                                                    cvv:
                                                      type: string
                                                      name: cvv
                                                    authentication:
                                                      type: object
                                                      properties:
                                                        eci:
                                                          type: string
                                                          name: eci
                                                        cavv:
                                                          type: string
                                                          name: cavv
                                                        vci:
                                                          type: string
                                                          name: vci
                                                      name: authentication
                                                  name: card
                                                tef:
                                                  type: object
                                                  properties:
                                                    token:
                                                      type: string
                                                      name: token
                                                    numberAccount:
                                                      type: string
                                                      name: numberAccount
                                                    typeAccount:
                                                      type: string
                                                      name: typeAccount
                                                    emisorCodeCmf:
                                                      type: string
                                                      name: emisorCodeCmf
                                                    rutUser:
                                                      type: string
                                                      name: rutUser
                                                    nameUser:
                                                      type: string
                                                      name: nameUser
                                                    phoneNumber:
                                                      type: string
                                                      name: phoneNumber
                                                    emailUser:
                                                      type: string
                                                      name: emailUser
                                                  name: tef
                                              example: "{\r\n  \"notifyUrl\": \"https://emisor.cl/qr-payments\",\r\n  \"paymentType\": \"card\",\r\n  \"userSelection\": [\r\n    {\r\n      \"share\": 48,\r\n      \"paymentType\": \"S2\",\r\n      \"childId\": \"6\"\r\n    }\r\n  ],\r\n  \"card\": {\r\n    \"cardNumber\": \"string\",\r\n    \"cardType\": \"PREPAID\",\r\n    \"cardBrand\": \"string\",\r\n    \"expirationDate\": \"4811\",\r\n    \"cvv\": \"163\",\r\n    \"authentication\": {\r\n      \"eci\": \"91\",\r\n      \"cavv\": \"ShW1RooRIris5\",\r\n      \"vci\": \"BneK\"\r\n    }\r\n  },\r\n  \"tef\": {\r\n    \"token\": \"RCZnkKaaRQ_v6MMw1sXsvpEgEP\",\r\n    \"numberAccount\": \"EVMrbx9lJHQl3Gx\",\r\n    \"typeAccount\": \"23\",\r\n    \"emisorCodeCmf\": \"z3aZ\",\r\n    \"rutUser\": \"O_LeHJzx\",\r\n    \"nameUser\": \"eOvFQF2oOfwpFlfuo3L7rnPMZqnI8wWLgdYzpigiRbf\",\r\n    \"phoneNumber\": \"JrbfHB73O\",\r\n    \"emailUser\": \"vvQimzpE3E\"\r\n  }\r\n}"
                                            variable: message.body
                                            content: application/json
                                        actions:
                                          - set: output.notifyUrl
                                            from: body.data.notifyURL
                                          - set: output.paymentType
                                            from: body.data.paymentType
                                          - create: output.userSelection
                                            foreach: body.data.userSelection
                                            from: body.data.userSelection
                                            actions:
                                              - set: paymentType
                                                from: paymentType
                                              - set: share
                                                from: shares
                                              - set: childId
                                                from: childId
                                          - set: output.tef.token
                                            from: input.tokenCuenta
                                          - set: output.tef.typeAccount
                                            from: body.data.tef.typeAccount
                                            value: context.get('ctx.typeAccount');
                                          - set: output.tef.emisorCodeCmf
                                            from: body.data.tef.emisorCodeCmf
                                            value: context.get('ctx.emisorCodeCmf');
                                          - set: output.tef.rutUser
                                            from: body.data.tef.rutUser
                                            value: context.get('ctx.rutUser');
                                          - set: output.tef.nameUser
                                            from: body.data.tef.nameUser
                                            value: context.get('ctx.nameUser');
                                          - set: output.tef.phoneNumber
                                            from: body.data.tef.phoneNumber
                                            value: context.get('ctx.phoneNumber');
                                          - set: output.tef.emailUser
                                            from: body.data.tef.emailUser
                                            value: context.get('ctx.emailUser');
                                          - set: output.tef.numberAccount
                                            from: body.data.tef.numberAccount
                                            value: context.get('ctx.numberAccount');
                                - otherwise:
                                    - gatewayscript:
                                        version: 2.0.0
                                        title: buildUrlParams
                                        source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que setea el valor de token como header\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia buildParams tokenValidate\");\r\ncontext.request.body.readAsJSON(function (error, body) {\r\n    let token = body.data.tef.token;\r\n    \r\n    \r\n    if(token){\r\n        context.message.header.set(\"tokenCuenta\",token);\r\n    }\r\n    \r\n});\r\n\r\nconsole.error(\"headers enviados: \" + JSON.stringify(context.get('message.headers')));\r\n"
                                    - switch:
                                        version: 2.0.0
                                        title: switch
                                        case:
                                          - condition: (ctx.mock=1)
                                            execute:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeValidaTokenMock
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: GET
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  websocket-upgrade: false
                                                  target-url: $(target-url-validate-token)
                                          - otherwise:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeValidaToken
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: keep
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: www.pordefinir.com
                                    - gatewayscript:
                                        version: 2.0.0
                                        title: validateResponse
                                        source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida el response del nativo \r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validateResponse tokenValidado tef\");\r\n\r\nconst defaultErrorMessage = \"Service unavailable\";\r\nconst errors = [];\r\n\r\n\r\nconst statusCode = context.message.statusCode;\r\nconsole.error(`Status code de respuesta: %s`, statusCode);\r\n\r\ncontext.message.body.readAsJSON(function (error, body) {\r\n    if (error) {\r\n        console.log(\"Error al obtener la respuesta, JSON invalido\");\r\n        console.log(error);\r\n        errors.push(error);\r\n\r\n        const minStatus = \"500\";\r\n        const errorData = {\r\n            minStatus,\r\n            errors\r\n        };\r\n\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ResponseException\", defaultErrorMessage);\r\n    } else if (statusCode != 200) {\r\n        let errors = [];\r\n        if (body.internalCode && body.description && body.requestId) {\r\n            errors = [{\r\n                \"internalCode\": statusCode.toString(),\r\n                \"description\": body.description,\r\n                \"requestId\": body.requestId\r\n            }];\r\n        } else {\r\n            errors = body;\r\n        }\r\n\r\n        const errorData = {\r\n            minStatus: statusCode.toString(),\r\n            errors\r\n        };\r\n        context.set(\"ctx.errorData\", errorData);\r\n        context.reject(\"ResponseException\", defaultErrorMessage);\r\n    } else {\r\n        let tokenValido = body.esTokenValido;\r\n        console.error(\"Token valido: \" + tokenValido);\r\n        if (tokenValido != \"OK\") {\r\n\r\n            const tokenInvalidoError = {\r\n                \"code\": \"401\",\r\n                \"detail\": \"token invalido\",\r\n                \"source\": { \"pointer\": \"token\" }\r\n            };\r\n            errors.push(tokenInvalidoError);\r\n            const minStatus = \"401\";\r\n            const errorData = {\r\n                minStatus,\r\n                errors\r\n            };\r\n\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        }\r\n    }\r\n});"
                                    - map:
                                        version: 2.0.0
                                        title: map
                                        inputs:
                                          input:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                internalCode:
                                                  type: number
                                                  name: internalCode
                                                description:
                                                  type: string
                                                  name: description
                                                requestId:
                                                  type: string
                                                  name: requestId
                                                esTokenValido:
                                                  type: string
                                                  name: esTokenValido
                                                cuenta:
                                                  type: object
                                                  properties:
                                                    rutUsuario:
                                                      type: string
                                                      name: rutUsuario
                                                    numeroCuenta:
                                                      type: string
                                                      name: numeroCuenta
                                                    tipoCuenta:
                                                      type: string
                                                      name: tipoCuenta
                                                    nombreUsuario:
                                                      type: string
                                                      name: nombreUsuario
                                                    telefono:
                                                      type: string
                                                      name: telefono
                                                    email:
                                                      type: string
                                                      name: email
                                                  name: cuenta
                                              example: "{\r\n  \"internalCode\": 0,\r\n  \"description\": \"OK\",\r\n  \"requestId\": \"1675350587484\",\r\n  \"esTokenValido\": \"OK/NK\",\r\n  \"cuenta\": {\r\n    \"rutUsuario\": \"15789495-3\",\r\n    \"numeroCuenta\": \"2389\",\r\n    \"tipoCuenta\": \"10|20|40\",\r\n    \"nombreUsuario\": \"Luis Manuel Rodriguez Fernandez\",\r\n    \"telefono\": \"+56214578411\",\r\n    \"email\": \"luispf@email.com\"\r\n  }\r\n}"
                                            variable: message.body
                                            content: application/json
                                          body:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                meta:
                                                  type: object
                                                  properties:
                                                    _rqDateTime:
                                                      type: string
                                                      name: _rqDateTime
                                                  name: meta
                                                data:
                                                  type: object
                                                  properties:
                                                    id:
                                                      type: string
                                                      name: id
                                                    notifyURL:
                                                      type: string
                                                      name: notifyURL
                                                    paymentType:
                                                      type: string
                                                      name: paymentType
                                                    userSelection:
                                                      type: array
                                                      items:
                                                        properties:
                                                          paymentType:
                                                            type: string
                                                            name: paymentType
                                                          shares:
                                                            type: number
                                                            name: shares
                                                          childId:
                                                            type: string
                                                            name: childId
                                                        type: object
                                                      name: userSelection
                                                    card:
                                                      type: object
                                                      properties:
                                                        cardNumber:
                                                          type: string
                                                          name: cardNumber
                                                        expirationDate:
                                                          type: number
                                                          name: expirationDate
                                                        cavv:
                                                          type: string
                                                          name: cavv
                                                        vci:
                                                          type: string
                                                          name: vci
                                                        eci:
                                                          type: string
                                                          name: eci
                                                        cvv:
                                                          type: string
                                                          name: cvv
                                                        cardType:
                                                          type: string
                                                          name: cardType
                                                        cardBrand:
                                                          type: string
                                                          name: cardBrand
                                                      name: card
                                                    tef:
                                                      type: object
                                                      properties:
                                                        token:
                                                          type: string
                                                          name: token
                                                        numberAccount:
                                                          type: string
                                                          name: numberAccount
                                                        typeAccount:
                                                          type: string
                                                          name: typeAccount
                                                        emisorCodeCmf:
                                                          type: string
                                                          name: emisorCodeCmf
                                                        rutUser:
                                                          type: string
                                                          name: rutUser
                                                        nameUser:
                                                          type: string
                                                          name: nameUser
                                                        phoneNumber:
                                                          type: string
                                                          name: phoneNumber
                                                        emailUser:
                                                          type: string
                                                          name: emailUser
                                                      name: tef
                                                  name: data
                                              example: "{\r\n  \"meta\": {\r\n    \"_rqDateTime\": \"2018-02-10T09:30Z\"\r\n  },\r\n  \"data\": {\r\n    \"id\": \"123456789023454310000\",\r\n    \"notifyURL\": \"https://internal.banco.cl/callback\",\r\n    \"paymentType\": \"card|tef\",\r\n    \"userSelection\": [\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8b\"\r\n      },\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8bn\"\r\n      }\r\n    ],\r\n    \"card\": {\r\n      \"cardNumber\": \"1234567812345678\",\r\n      \"expirationDate\": 202312,\r\n      \"cavv\": \"964\",\r\n      \"vci\": \"147\",\r\n      \"eci\": \"258\",\r\n      \"cvv\": \"931\",\r\n      \"cardType\": \"DEBIT\",\r\n      \"cardBrand\": \"MAGNA\"\r\n    },\r\n    \"tef\": {\r\n      \"token\": \"uP2mJRg3samMQslR6DJ2\",\r\n      \"numberAccount\": \"01234567890\",\r\n      \"typeAccount\": \"020|030|040\",\r\n      \"emisorCodeCmf\": \"0017\",\r\n      \"rutUser\": \"444-8\",\r\n      \"nameUser\": \"ana melo\",\r\n      \"phoneNumber\": \"986756324\",\r\n      \"emailUser\": \"ana.melo@gmail.com\"\r\n    }\r\n  }\r\n}"
                                            variable: request.body
                                        outputs:
                                          output:
                                            schema:
                                              description: ''
                                              type: object
                                              properties:
                                                notifyUrl:
                                                  type: string
                                                  name: notifyUrl
                                                paymentType:
                                                  type: string
                                                  name: paymentType
                                                userSelection:
                                                  type: array
                                                  items:
                                                    properties:
                                                      share:
                                                        type: number
                                                        name: share
                                                      paymentType:
                                                        type: string
                                                        name: paymentType
                                                      childId:
                                                        type: string
                                                        name: childId
                                                    type: object
                                                  name: userSelection
                                                card:
                                                  type: object
                                                  properties:
                                                    cardNumber:
                                                      type: string
                                                      name: cardNumber
                                                    cardType:
                                                      type: string
                                                      name: cardType
                                                    cardBrand:
                                                      type: string
                                                      name: cardBrand
                                                    expirationDate:
                                                      type: string
                                                      name: expirationDate
                                                    cvv:
                                                      type: string
                                                      name: cvv
                                                    authentication:
                                                      type: object
                                                      properties:
                                                        eci:
                                                          type: string
                                                          name: eci
                                                        cavv:
                                                          type: string
                                                          name: cavv
                                                        vci:
                                                          type: string
                                                          name: vci
                                                      name: authentication
                                                  name: card
                                                tef:
                                                  type: object
                                                  properties:
                                                    token:
                                                      type: string
                                                      name: token
                                                    numberAccount:
                                                      type: string
                                                      name: numberAccount
                                                    typeAccount:
                                                      type: string
                                                      name: typeAccount
                                                    emisorCodeCmf:
                                                      type: string
                                                      name: emisorCodeCmf
                                                    rutUser:
                                                      type: string
                                                      name: rutUser
                                                    nameUser:
                                                      type: string
                                                      name: nameUser
                                                    phoneNumber:
                                                      type: string
                                                      name: phoneNumber
                                                    emailUser:
                                                      type: string
                                                      name: emailUser
                                                  name: tef
                                              example: "{\r\n  \"notifyUrl\": \"https://emisor.cl/qr-payments\",\r\n  \"paymentType\": \"card\",\r\n  \"userSelection\": [\r\n    {\r\n      \"share\": 48,\r\n      \"paymentType\": \"S2\",\r\n      \"childId\": \"6\"\r\n    }\r\n  ],\r\n  \"card\": {\r\n    \"cardNumber\": \"string\",\r\n    \"cardType\": \"PREPAID\",\r\n    \"cardBrand\": \"string\",\r\n    \"expirationDate\": \"4811\",\r\n    \"cvv\": \"163\",\r\n    \"authentication\": {\r\n      \"eci\": \"91\",\r\n      \"cavv\": \"ShW1RooRIris5\",\r\n      \"vci\": \"BneK\"\r\n    }\r\n  },\r\n  \"tef\": {\r\n    \"token\": \"RCZnkKaaRQ_v6MMw1sXsvpEgEP\",\r\n    \"numberAccount\": \"EVMrbx9lJHQl3Gx\",\r\n    \"typeAccount\": \"23\",\r\n    \"emisorCodeCmf\": \"z3aZ\",\r\n    \"rutUser\": \"O_LeHJzx\",\r\n    \"nameUser\": \"eOvFQF2oOfwpFlfuo3L7rnPMZqnI8wWLgdYzpigiRbf\",\r\n    \"phoneNumber\": \"JrbfHB73O\",\r\n    \"emailUser\": \"vvQimzpE3E\"\r\n  }\r\n}"
                                            variable: message.body
                                            content: application/json
                                        actions:
                                          - set: output.tef.rutUser
                                            from: input.cuenta.rutUsuario
                                            value: context.get('ctx.rutUser');
                                          - set: output.tef.numberAccount
                                            from: input.cuenta.numeroCuenta
                                            value: context.get('ctx.numberAccount');
                                          - set: output.tef.typeAccount
                                            from: input.cuenta.tipoCuenta
                                            value: context.get('ctx.typeAccount');
                                          - set: output.tef.nameUser
                                            from: input.cuenta.nombreUsuario
                                            value: context.get('ctx.nameUser');
                                          - set: output.tef.phoneNumber
                                            from: input.cuenta.telefono
                                            value: context.get('ctx.phoneNumber');
                                          - set: output.tef.emailUser
                                            from: input.cuenta.email
                                            value: context.get('ctx.emailUser');
                                          - set: output.tef.token
                                            from: body.data.tef.token
                                            value: context.get("ctx.token");
                                          - set: output.tef.emisorCodeCmf
                                            from: body.data.tef.emisorCodeCmf
                                            value: context.get('ctx.emisorCodeCmf');
                                          - set: output.notifyUrl
                                            from: body.data.notifyURL
                                          - set: output.paymentType
                                            from: body.data.paymentType
                                          - create: output.userSelection
                                            foreach: body.data.userSelection
                                            from: body.data.userSelection
                                            actions:
                                              - set: paymentType
                                                from: paymentType
                                              - set: share
                                                from: shares
                                              - set: childId
                                                from: childId
                          - gatewayscript:
                              version: 2.0.0
                              title: validateRequest
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que se encarga de setear headers requeridos por el nativo\r\n*               ademas de mostrar un log de los enviado al servicio nativo\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\nconsole.error(\"Inicia validateReques tef\");\r\n\r\nvar ResponseN = context.get(\"message.body\");\r\nvar headers = context.get(\"message.headers\");\r\nvar version = context.get('api.version');\r\nvar nameAPI = context.get('api.name');\r\nvar operation = context.get('api.operation.path');\r\nvar datetime= context.get('system.datetime');\r\nvar clientId= context.get('client.org.name').toUpperCase();\r\nvar log = \"API:\"+nameAPI+\"- Path:\"+operation+\"- Node\"+\"Validate Response - Version:\"+version+\"- Date:\"+datetime+\"- ClientID:\"+clientId+\"- Request:\"+JSON.stringify(ResponseN);\r\n\r\nvar userId = context.request.header.get('X-User-Id');\r\n\r\nvar flowId = context.request.header.get('X-Client-Payment-Id');\r\n\r\nvar walletRut = context.get(\"walletRut\");\r\n\r\nvar isMock = context.get(\"ctx.mock\");\r\n\r\ncontext.message.header.set(\"x-flow-id\",flowId);\r\ncontext.message.header.set(\"x-wallet-rut\",walletRut);\r\n\r\nif(isMock == 1){\r\n    context.message.header.set(\"X-Mock\",context.request.header.get(\"X-Mock\"));\r\n}\r\n\r\nif(userId){\r\n\r\n    context.message.header.set(\"x-user-id\",userId);\r\n}\r\n\r\n\r\n\r\nconsole.error(\"headers enviados: \" + JSON.stringify(context.get('message.headers')));\r\nconsole.error(log);\r\nconsole.error(\"headers: \"+ headers);"
                              description: >-
                                GatewayScript que muestra un log de la peticion
                                al nativo
                          - switch:
                              version: 2.0.0
                              title: switch
                              case:
                                - condition: (ctx.mock=1)
                                  execute:
                                    - invoke:
                                        version: 2.2.0
                                        title: invokeMock
                                        backend-type: detect
                                        header-control:
                                          type: blocklist
                                          values: []
                                        parameter-control:
                                          type: allowlist
                                          values: []
                                        http-version: HTTP/1.1
                                        timeout: 60
                                        verb: keep
                                        chunked-uploads: true
                                        persistent-connection: true
                                        cache-response: protocol
                                        cache-ttl: 900
                                        stop-on-error: []
                                        graphql-send-type: detect
                                        websocket-upgrade: false
                                        target-url: $(target-url-mock-qrpayments-authorize)
                                - otherwise:
                                    - switch:
                                        version: 2.0.0
                                        title: switch
                                        case:
                                          - condition: (ctx.restrictedProduction=1)
                                            execute:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeRestrictedProd
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: keep
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: >-
                                                    $(target-url-restrictedProduction-qrpayments-authorize)$(ctx.id)
                                          - otherwise:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeNativo
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: keep
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: >-
                                                    $(target-url-qrpayments-authorize)$(ctx.id)
                      - otherwise:
                          - gatewayscript:
                              version: 2.0.0
                              title: desencryptFiled
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que desencripta los datos sensibles \r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia desencryptField No tef\");\r\nconst crypto = require('crypto');\r\n\r\nvar valueKey = context.get('ctx.key');\r\n\r\nvar key = Buffer.from(Buffer.from(valueKey,'base64').toString('ascii'));\r\ncontext.message.body.readAsJSON(function(error, body) {\r\n\t\r\n\tvar payment = body.data.card;\r\n\tvar cardNumber = payment.cardNumber;\r\n\tvar expirationDate = payment.expirationDate;\r\n\tvar cavv = payment.cavv;\r\n\tvar vci = payment.vci;\r\n\tvar eci = payment.eci;\r\n\tvar cvv = payment.cvv;\r\n\r\n\r\n context.set('ctx.cardNumber', decipherField(cardNumber));\r\n context.set('ctx.expirationDate', expirationDate ? decipherField(expirationDate):undefined);\r\n context.set('ctx.cavv', cavv ?  decipherField(cavv): undefined);\r\n context.set('ctx.vci',  vci ?  decipherField(vci): undefined);\r\n context.set('ctx.eci',  eci ?  decipherField(eci): undefined );\r\n context.set('ctx.cvv',  cvv ?  decipherField(cvv): undefined);\r\n \r\n\t\r\n});\r\n\r\n\r\nfunction decipherField(value){\r\n\r\n    let iv = Buffer.from(value.substring(value.length-16,value.length));\r\n    let valueEncrypt = value.substring(0,value.length-16);\r\n    let decipher = crypto.createDecipheriv('aes256-cbc', key, iv);\r\n    decipher.update(valueEncrypt, 'hex');\r\n    let originalValue = decipher.final('utf8');\r\n    return originalValue.trim();\r\n}"
                              description: >-
                                GatewayScript que desencripta los datos
                                sensibles
                          - gatewayscript:
                              version: 2.0.0
                              title: validateBody
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida cada propiedad del body segun\r\n*               los requerimientos de contrato\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validateBody no tef\");\r\nconst defaultErrorMessage = \"Invalid Parameter: Validation Failure\";\r\nlet valuesPaymentTypes = context.get('api.properties.valuesPaymentTypes').split(\",\");\r\nlet maxTransactionId = context.get('api.properties.maxTransactionId');\r\nlet maxNotifyUrl = context.get('api.properties.maxNotifyUrl');\r\nlet maxFees = context.get('api.properties.maxFees');\r\nlet maxPaymentType = context.get('api.properties.maxPaymentType');\r\nlet maxCardNumber = context.get('api.properties.maxCardNumber');\r\nlet maxExpirationDate = context.get('api.properties.maxExpirationDate');\r\nlet maxCAVV = context.get('api.properties.maxCAVV');\r\nlet maxECI = context.get('api.properties.maxECI');\r\nlet maxVCI = context.get('api.properties.maxVCI');\r\nlet maxCVV = context.get('api.properties.maxCVV');\r\nlet minUserId = context.get('api.properties.minUserId');\r\nlet maxUserId = context.get('api.properties.maxUserId');\r\nlet valueSalePrepaid = context.get('api.properties.valueSalePrepaid');\r\nlet valueSaleDebit = context.get('api.properties.valueSaleDebit');\r\n\r\nlet cardNumber = context.get('ctx.cardNumber');\r\nlet expirationDate = context.get('ctx.expirationDate');\r\nlet cavv = context.get('ctx.cavv');\r\nlet eci = context.get('ctx.eci');\r\nlet vci = context.get('ctx.vci');\r\nlet cvv = context.get('ctx.cvv');\r\nvar errors = [];\r\ncontext.message.body.readAsJSON(function(error, body) {\r\n\t\r\nvar attributes = body.data;\r\nvar userSelection = attributes.userSelection;\r\nvar userId = context.get('request.headers.X-User-Id');\r\n\r\nvar flowId = context.get('request.headers.X-Client-Payment-Id');\r\n\r\n\r\nif(valuesPaymentTypes.includes(userSelection.paymentType) &&  (userSelection.paymentType !==  valueSaleDebit && userSelection.paymentType !== valueSalePrepaid)){\r\n    addValidation(\"shares\",\r\n    (!userSelection.shares),\r\n    {\r\n        \"code\": \"422\",\r\n        \"detail\": `El campo shares es requerido para las transacciones de credito`,\r\n        \"source\": { \"pointer\": \"shares\" }\r\n    });\r\n}\r\n\r\nif(body.data.id){\r\ncontext.set(\"ctx.id\", body.data.id);\r\n    addValidation(\"id\",\r\n        (body.data.id.length > maxTransactionId),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El id ${body.data.id}  debe ser de maximo ${maxTransactionId} caracteres`,\r\n            \"source\": { \"pointer\": \"id\" }\r\n        });\r\n    \r\n    addValidation(\"id\",\r\n        isAplhaNumericFormat(body.data.id),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El id ${body.data.id}  debe ser alfanumerico`,\r\n            \"source\": { \"pointer\": \"id\" }\r\n        });\r\n}\r\n\r\n\r\nif(userId || userId === \"\" ){\r\n    addValidation(\"userId\",\r\n    isAplhaNumericFormat(userId), // no cumple formato alfanumerico\r\n        {\r\n        \"code\": \"422\",\r\n        \"detail\": `El userId ${userId}  debe ser alfanumerico`,\r\n        \"source\": { \"pointer\": \"userId\" }\r\n    });\r\n\r\n    addValidation(\"userId\",\r\n    (userId.length < minUserId || userId.length > maxUserId ), // no que el numero de caracteres este entre el rango\r\n        {\r\n        \"code\": \"422\",\r\n        \"detail\": `El userId ${userId}  debe ser de largo mínimo de ${minUserId} y máximo de ${maxUserId}`,\r\n        \"source\": { \"pointer\": \"userId\" }\r\n    });\r\n}\r\n\r\nif (attributes.notifyURL) {\r\n\r\n    addValidation(\"notifyURL\",\r\n        (attributes.notifyURL.length > maxNotifyUrl),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El notifyURL ${attributes.notifyURL}  debe ser de maximo 2047 caracteres`,\r\n            \"source\": { \"pointer\": \"notifyURL\" }\r\n        });\r\n        \r\n    addValidation(\"notifyURL\",\r\n        isUrlFormat(attributes.notifyURL),\r\n        {\r\n            \"code\": \"422\",\r\n            \"detail\": `El notifyURL ${attributes.notifyURL} URL invalido`,\r\n            \"source\": { \"pointer\": \"notifyURL\" }\r\n        });\r\n\r\n}\r\n\r\nif( valuesPaymentTypes.includes(userSelection.paymentType) && (userSelection.paymentType ===  valueSaleDebit || userSelection.p
                              description: >-
                                GatewayScript que valida cada propiedad del body
                                segun los requerimientos de contrato
                          - gatewayscript:
                              version: 2.0.0
                              title: cardTypeMapping
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que setea el tipo de tarjeta \r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia cardTypeMapping no tef\");\r\ncontext.message.body.readAsJSON(function(error, body) {\r\n    var attributes = body.data;\r\n    var userSelection = attributes.userSelection;\r\n    \r\n    var cardTypeMap = JSON.parse(context.get('api.properties.cardTypeMap'));\r\n    console.error(\"cardTypeMap\"+cardTypeMap);\r\n    \r\n    var cardType;\r\n    \r\n    if(cardTypeMap.hasOwnProperty(userSelection.paymentType)){\r\n        cardType = cardTypeMap[userSelection.paymentType];\r\n    }else{\r\n        cardType = cardTypeMap.DEFAULT;\r\n    }\r\n    \r\n    context.set('ctx.cardType', cardType);\t\r\n    console.error(cardType);\t\r\n    \t\r\n});\r\n\r\n"
                              description: GatewayScript que setea el tipo de tarjeta
                          - map:
                              version: 2.0.0
                              title: map
                              inputs:
                                input:
                                  schema:
                                    description: ''
                                    type: object
                                    properties:
                                      meta:
                                        type: object
                                        properties:
                                          _rqDateTime:
                                            type: string
                                            name: _rqDateTime
                                        name: meta
                                      data:
                                        type: object
                                        properties:
                                          id:
                                            type: string
                                            name: id
                                          notifyURL:
                                            type: string
                                            name: notifyURL
                                          paymentType:
                                            type: string
                                            name: paymentType
                                          userSelection:
                                            type: array
                                            items:
                                              properties:
                                                paymentType:
                                                  type: string
                                                  name: paymentType
                                                shares:
                                                  type: number
                                                  name: shares
                                                childId:
                                                  type: string
                                                  name: childId
                                              type: object
                                            name: userSelection
                                          card:
                                            type: object
                                            properties:
                                              cardNumber:
                                                type: string
                                                name: cardNumber
                                              expirationDate:
                                                type: number
                                                name: expirationDate
                                              cavv:
                                                type: string
                                                name: cavv
                                              vci:
                                                type: string
                                                name: vci
                                              eci:
                                                type: string
                                                name: eci
                                              cvv:
                                                type: string
                                                name: cvv
                                              cardType:
                                                type: string
                                                name: cardType
                                              cardBrand:
                                                type: string
                                                name: cardBrand
                                            name: card
                                          tef:
                                            type: object
                                            properties:
                                              token:
                                                type: string
                                                name: token
                                              numberAccount:
                                                type: string
                                                name: numberAccount
                                              typeAccount:
                                                type: string
                                                name: typeAccount
                                              emisorCodeCmf:
                                                type: string
                                                name: emisorCodeCmf
                                              rutUser:
                                                type: string
                                                name: rutUser
                                              nameUser:
                                                type: string
                                                name: nameUser
                                              phoneNumber:
                                                type: string
                                                name: phoneNumber
                                              emailUser:
                                                type: string
                                                name: emailUser
                                            name: tef
                                        name: data
                                    example: "{\r\n  \"meta\": {\r\n    \"_rqDateTime\": \"2018-02-10T09:30Z\"\r\n  },\r\n  \"data\": {\r\n    \"id\": \"123456789023454310000\",\r\n    \"notifyURL\": \"https://internal.banco.cl/callback\",\r\n    \"paymentType\": \"card|tef\",\r\n    \"userSelection\": [\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8b\"\r\n      },\r\n      {\r\n        \"paymentType\": \"TF\",\r\n        \"shares\": 3,\r\n        \"childId\": \"13A8bn\"\r\n      }\r\n    ],\r\n    \"card\": {\r\n      \"cardNumber\": \"1234567812345678\",\r\n      \"expirationDate\": 202312,\r\n      \"cavv\": \"964\",\r\n      \"vci\": \"147\",\r\n      \"eci\": \"258\",\r\n      \"cvv\": \"931\",\r\n      \"cardType\": \"DEBIT\",\r\n      \"cardBrand\": \"MAGNA\"\r\n    },\r\n    \"tef\": {\r\n      \"token\": \"uP2mJRg3samMQslR6DJ2\",\r\n      \"numberAccount\": \"01234567890\",\r\n      \"typeAccount\": \"020|030|040\",\r\n      \"emisorCodeCmf\": \"0017\",\r\n      \"rutUser\": \"444-8\",\r\n      \"nameUser\": \"ana melo\",\r\n      \"phoneNumber\": \"986756324\",\r\n      \"emailUser\": \"ana.melo@gmail.com\"\r\n    }\r\n  }\r\n}"
                                  variable: message.body
                                  content: application/json
                              outputs:
                                output:
                                  schema:
                                    description: ''
                                    type: object
                                    properties:
                                      notifyUrl:
                                        type: string
                                        name: notifyUrl
                                      paymentType:
                                        type: string
                                        name: paymentType
                                      userSelection:
                                        type: array
                                        items:
                                          properties:
                                            share:
                                              type: number
                                              name: share
                                            paymentType:
                                              type: string
                                              name: paymentType
                                            childId:
                                              type: string
                                              name: childId
                                          type: object
                                        name: userSelection
                                      card:
                                        type: object
                                        properties:
                                          cardNumber:
                                            type: string
                                            name: cardNumber
                                          cardType:
                                            type: string
                                            name: cardType
                                          cardBrand:
                                            type: string
                                            name: cardBrand
                                          expirationDate:
                                            type: string
                                            name: expirationDate
                                          cvv:
                                            type: string
                                            name: cvv
                                          authentication:
                                            type: object
                                            properties:
                                              eci:
                                                type: string
                                                name: eci
                                              cavv:
                                                type: string
                                                name: cavv
                                              vci:
                                                type: string
                                                name: vci
                                            name: authentication
                                        name: card
                                      tef:
                                        type: object
                                        properties:
                                          token:
                                            type: string
                                            name: token
                                          numberAccount:
                                            type: string
                                            name: numberAccount
                                          typeAccount:
                                            type: string
                                            name: typeAccount
                                          emisorCodeCmf:
                                            type: string
                                            name: emisorCodeCmf
                                          rutUser:
                                            type: string
                                            name: rutUser
                                          nameUser:
                                            type: string
                                            name: nameUser
                                          phoneNumber:
                                            type: string
                                            name: phoneNumber
                                          emailUser:
                                            type: string
                                            name: emailUser
                                        name: tef
                                    example: "{\r\n  \"notifyUrl\": \"https://emisor.cl/qr-payments\",\r\n  \"paymentType\": \"card\",\r\n  \"userSelection\": [\r\n    {\r\n      \"share\": 48,\r\n      \"paymentType\": \"S2\",\r\n      \"childId\": \"6\"\r\n    }\r\n  ],\r\n  \"card\": {\r\n    \"cardNumber\": \"string\",\r\n    \"cardType\": \"PREPAID\",\r\n    \"cardBrand\": \"string\",\r\n    \"expirationDate\": \"4811\",\r\n    \"cvv\": \"163\",\r\n    \"authentication\": {\r\n      \"eci\": \"91\",\r\n      \"cavv\": \"ShW1RooRIris5\",\r\n      \"vci\": \"BneK\"\r\n    }\r\n  },\r\n  \"tef\": {\r\n    \"token\": \"RCZnkKaaRQ_v6MMw1sXsvpEgEP\",\r\n    \"numberAccount\": \"EVMrbx9lJHQl3Gx\",\r\n    \"typeAccount\": \"23\",\r\n    \"emisorCodeCmf\": \"z3aZ\",\r\n    \"rutUser\": \"O_LeHJzx\",\r\n    \"nameUser\": \"eOvFQF2oOfwpFlfuo3L7rnPMZqnI8wWLgdYzpigiRbf\",\r\n    \"phoneNumber\": \"JrbfHB73O\",\r\n    \"emailUser\": \"vvQimzpE3E\"\r\n  }\r\n}"
                                  variable: message.body
                                  content: application/json
                              actions:
                                - set: output.notifyUrl
                                  from: input.data.notifyURL
                                - set: output.paymentType
                                  from: input.data.paymentType
                                - create: output.userSelection
                                  foreach: input.data.userSelection
                                  from: input.data.userSelection
                                  actions:
                                    - set: paymentType
                                      from: paymentType
                                    - set: share
                                      from: shares
                                    - set: childId
                                      from: childId
                                - set: output.card.cardNumber
                                  from: input.data.card.cardNumber
                                  value: context.get('ctx.cardNumber');
                                - set: output.card.expirationDate
                                  from: input.data.card.expirationDate
                                  value: context.get('ctx.expirationDate');
                                - set: output.card.authentication.cavv
                                  from: input.data.card.cavv
                                  value: context.get('ctx.cavv');
                                - set: output.card.authentication.vci
                                  from: input.data.card.vci
                                  value: context.get('ctx.vci');
                                - set: output.card.authentication.eci
                                  from: input.data.card.eci
                                  value: context.get('ctx.eci');
                                - set: output.card.cvv
                                  from: input.data.card.cvv
                                  value: context.get('ctx.cvv');
                                - set: output.card.cardType
                                  from: input.data.card.cardType
                                - set: output.card.cardBrand
                                  from: input.data.card.cardBrand
                          - gatewayscript:
                              version: 2.0.0
                              title: validateRequest
                              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que muestra un log de la peticion al nativo \r\n*               ademas de ingresar los headers requeridos por el servicio nativo\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\nconsole.error(\"Inicia validateRequest no tef\");\r\n\r\nvar ResponseN = context.get(\"message.body\");\r\nvar headers = context.get(\"message.headers\");\r\nvar version = context.get('api.version');\r\nvar nameAPI = context.get('api.name');\r\nvar operation = context.get('api.operation.path');\r\nvar datetime= context.get('system.datetime');\r\nvar clientId= context.get('client.org.name').toUpperCase();\r\nvar log = \"API:\"+nameAPI+\"- Path:\"+operation+\"- Node\"+\"Validate Response - Version:\"+version+\"- Date:\"+datetime+\"- ClientID:\"+clientId+\"- Request:\"+JSON.stringify(ResponseN);\r\n\r\nvar userId = context.get('request.parameters.userId');\r\n\r\nvar flowId = context.message.header.get('X-Client-Payment-Id');\r\n\r\ncontext.message.header.set(\"x-flow-id\",flowId);\r\n\r\n\r\n\r\nif(userId){\r\n\r\n    context.message.header.set(\"x-user-id\",userId);\r\n}\r\n\r\nconsole.error(\"headers enviados: \" + JSON.stringify(context.get('message.headers')));\r\nconsole.error(log);\r\nconsole.error(\"headers: \"+ headers);\r\n\r\n\r\n\r\n\r\n"
                              description: >-
                                GatewayScript que muestra un log de la peticion
                                al nativo
                          - switch:
                              version: 2.0.0
                              title: switch
                              case:
                                - condition: (ctx.mock=1)
                                  execute:
                                    - invoke:
                                        version: 2.2.0
                                        title: invokeMock
                                        backend-type: detect
                                        header-control:
                                          type: blocklist
                                          values: []
                                        parameter-control:
                                          type: allowlist
                                          values: []
                                        http-version: HTTP/1.1
                                        timeout: 60
                                        verb: keep
                                        chunked-uploads: true
                                        persistent-connection: true
                                        cache-response: protocol
                                        cache-ttl: 900
                                        stop-on-error: []
                                        graphql-send-type: detect
                                        websocket-upgrade: false
                                        target-url: $(target-url-mock-qrpayments-authorize)
                                - otherwise:
                                    - switch:
                                        version: 2.0.0
                                        title: switch
                                        case:
                                          - condition: (ctx.restrictedProduction=1)
                                            execute:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeRestrictedProd
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: keep
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: >-
                                                    $(target-url-restrictedProduction-qrpayments-authorize)$(ctx.id)
                                          - otherwise:
                                              - invoke:
                                                  version: 2.2.0
                                                  title: invokeNativo
                                                  backend-type: detect
                                                  header-control:
                                                    type: blocklist
                                                    values: []
                                                  parameter-control:
                                                    type: allowlist
                                                    values: []
                                                  http-version: HTTP/1.1
                                                  timeout: 60
                                                  verb: keep
                                                  chunked-uploads: true
                                                  persistent-connection: true
                                                  cache-response: protocol
                                                  cache-ttl: 900
                                                  stop-on-error: []
                                                  graphql-send-type: detect
                                                  websocket-upgrade: false
                                                  target-url: >-
                                                    $(target-url-qrpayments-authorize)$(ctx.id)
                - gatewayscript:
                    version: 2.0.0
                    title: validateResponse
                    source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript que valida el response del nativo\r\n* Autores      : exetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/02/13\r\n* @desc:  version inicial\r\n* \r\n*/\r\n\r\nconsole.error(\"Inicia validateResponse tef\");\r\nvar ResponseN = context.get(\"message.body\");\r\n\r\nvar version = context.get('api.version');\r\nvar nameAPI = context.get('api.name');\r\nvar operation = context.get('api.operation.path');\r\nvar datetime = context.get('system.datetime');\r\nvar clientId = context.get('client.org.name').toUpperCase();\r\nvar log = \"API:\" + nameAPI + \"- Path:\" + operation + \"- Node\" + \"Validate Response - Version:\" + version + \"- Date:\" + datetime + \"- ClientID:\" + clientId + \"- Request:\" + JSON.stringify(ResponseN);\r\nconsole.error(log);\r\n\r\nconst errors = [];\r\nconst statusCode = context.get('message.status.code');\r\nconsole.error(statusCode);\r\n\r\n\r\nconst defaultErrorMessage = \"Service unavailable\";\r\ncontext.message.body.readAsJSON(function (error, body) {\r\n    if (statusCode != 204) {\r\n        if (error) {\r\n            console.log(\"Error al obtener la respuesta, JSON invalido\");\r\n            console.log(error);\r\n            errors.push(error);\r\n\r\n            const minStatus = \"500\";\r\n            const errorData = {\r\n                minStatus,\r\n                errors\r\n            };\r\n\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        } else {\r\n            console.error(\"ErrorData: \" + JSON.stringify(body.errors));\r\n            let errors = [];\r\n            if (body.errors && body.errors[0].detail && body.errors[0].source && body.errors[0].code) {\r\n                console.error(\"esta ok el body\");\r\n                let messageBody = body.errors[0];\r\n                errors = [\r\n                    {\r\n                        \"code\": statusCode.toString(),\r\n                        \"detail\": messageBody.detail,\r\n                        \"source\": messageBody.source\r\n                    }\r\n                ];\r\n            } else {\r\n                console.error(\"body no esperado\");\r\n                errors = body;\r\n            }\r\n\r\n            const errorData = {\r\n                minStatus: statusCode.toString(),\r\n                errors\r\n            };\r\n\r\n            context.set(\"ctx.errorData\", errorData);\r\n            context.reject(\"ResponseException\", defaultErrorMessage);\r\n        }\r\n\r\n    }\r\n\r\n\r\n});\r\n"
    finally: []
    catch:
      - errors:
          - ResponseException
          - ParametersException
        execute:
          - gatewayscript:
              version: 2.0.0
              title: assembleException
              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript el cual resivira las excepciones\r\n*                presentadas por la API para retornar el objeto \r\n*                de error esperado\r\n* Autores      : extetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/01/03\r\n* @desc:  version inicial\r\n*/\r\nconsole.error(\"inicia responseExeption\");\r\nconst now = new Date();\r\n\r\nconst errorData = context.get('ctx.errorData');\r\n\r\nconst errors = errorData.errors;\r\nconst minStatus = errorData.minStatus;\r\n\r\ncontext.message.statusCode = minStatus;\r\ncontext.message.header.set('content-type','application/json');\r\nsession.output.write({\r\n    \"meta\":    {\r\n      \"_version\": context.get('api.version'),\r\n      \"_rqDateTime\": context.get('system.datetime'),\r\n      \"_clientId\": context.get('client.org.name').toUpperCase(),\r\n      \"_clientPaymentId\": context.message.header.get('X-Global-Transaction-ID')\r\n   },\r\n    \"errors\": errors\r\n    \r\n});"
      - errors: []
        execute:
          - gatewayscript:
              version: 2.0.0
              title: defaultException
              source: "/**\r\n*  _______                  _                 _    \r\n* |__   __|                | |               | |   \r\n*    | |_ __ __ _ _ __  ___| |__   __ _ _ __ | | __\r\n*    | | '__/ _` | '_ \\/ __| '_ \\ / _` | '_ \\| |/ /\r\n*    | | | | (_| | | | \\__ \\ |_) | (_| | | | |   < \r\n*    |_|_|  \\__,_|_| |_|___/_.__/ \\__,_|_| |_|_|\\_\\ 2023\r\n* \r\n************************************************************\r\n* Descripcion  : GatewayScript el cual retornara el objeto de \r\n*                error para el caso de alguna excepcion que no\r\n*                pueda controlar\r\n* Autores      : extetrivino@transbank.cl\r\n************************************************************\r\n*\r\n* @version: 2023/01/03\r\n* @desc:  version inicial\r\n*/\r\n\r\nconsole.error(\"Inicia defaultException\");\r\n\r\ncontext.set('message.headers.content-type',\"application/json\");\r\n\r\ncontext.set('message.status.code',503);\r\n\r\n\r\nsession.output.write({\r\n    \"meta\":{\r\n        \"_version\": context.get('api.version'),\r\n        \"_rqDateTime\": context.get('system.datetime')\r\n    },\r\n    \"errors\": [{\r\n        \"status\": 503,\r\n        \"title\": \"Servicio no disponible\",\r\n        \"detail\": \"El servicio  no se encuentra disponible. Intente por favor más tarde.\"\r\n    }]\r\n});"
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
    target-url-qrcodes:
      value: >-
        https://wsmocksdev.tools.tbk.cl/rest/API+Cobro+QR+V3+Mock/1.0.0/wallet/v3/qr-codes
    target-url-qrpayments-authorize:
      value: >-
        https://wsmocksdev.tools.tbk.cl/rest/API+Cobro+QR+V3+Mock/1.0.0/wallet/v3/transaction/1
    target-url-qrpayments:
      value: >-
        https://wsmocksdev.tools.tbk.cl/rest/API+Cobro+QR+V3+Mock/1.0.0/wallet/v3/transaction/1
    target-url-qrpayments-reject:
      value: >-
        https://wsmocksdev.tools.tbk.cl/rest/API+Cobro+QR+V3+Mock/1.0.0/wallet/v3/cancel
    target-url-mock-qrcodes:
      value: http://TBK.LAN.LOOPBACK:20080/MocksTBK/APIC/v3/validate
    target-url-mock-qrpayments-authorize:
      value: http://TBK.LAN.LOOPBACK:20080/MocksTBK/APIC/v3/authorize
    target-url-mock-qrpayments:
      value: http://TBK.LAN.LOOPBACK:20080/MocksTBK/APIC/v3/voucher
    target-url-mock-qrpayments-reject:
      value: http://TBK.LAN.LOOPBACK:20080/MocksTBK/APIC/v3/cancel
    maxTransactionId:
      value: '50'
    maxCodeKey:
      value: '1024'
    maxSimpleCode:
      value: '8'
    maxTipAmount:
      value: '18'
    maxAmount:
      value: '18'
    maxCurrency:
      value: '3'
    valuesPaymentTypes:
      value: VN,SI,VC,VD,S2,NC,VP
    maxNotifyUrl:
      value: '2047'
    maxFees:
      value: '3'
    maxPaymentType:
      value: '3'
    maxCardNumber:
      value: '20'
    maxExpirationDate:
      value: '4'
    maxCAVV:
      value: '40'
    maxECI:
      value: '2'
    maxVCI:
      value: '4'
    maxCVV:
      value: '4'
    minUserId:
      value: '5'
    maxUserId:
      value: '18'
    valueSaleDebit:
      value: VD
    valueSalePrepaid:
      value: VP
    cardTypeMap:
      value: '{"VP": "PREPAID","VD": "DEBIT", "DEFAULT":"CREDIT"}'
    cryptoKey:
      value: name:20231109-apicobroqr-tsp_idcred_key
    valueRestrictedProduction:
      value: QA
    target-url-restrictedProduction-qrcodes:
      value: https://validateqa.qrwlte.qa.transbank.local/wallet/v2/qr/validate
    target-url-restrictedProduction-qrpayments:
      value: https://voucherqa.qrwlte.qa.transbank.local/wallet/v2/transaction/
    target-url-restrictedProduction-qrpayments-reject:
      value: https://notify-cancelqa.qrwlte.qa.transbank.local/wallet/v2/transaction/
    target-url-restrictedProduction-qrpayments-authorize:
      value: https://authorizeqa.qrwlte.qa.transbank.local/wallet/v2/transaction/
    maxToken:
      value: '30'
    maxNumberAccount:
      value: '20'
    maxTypeAccount:
      value: '3'
    maxEmisorCodeCmf:
      value: '4'
    maxIdWallet:
      value: '10'
    maxRutUser:
      value: '10'
    maxPhoneNumber:
      value: '20'
    maxEmailUser:
      value: '50'
    maxNameUser:
      value: '50'
    target-url-Generate-token:
      value: http://TBK.LAN.LOOPBACK:20080/MocksTBK/APIC/v3/genTef
    target-url-validate-token:
      value: http://TBK.LAN.LOOPBACK:20080/MocksTBK/APIC/v3/valTef
    paymentTypeValues:
      value: card,tef
    cardBrandValues:
      value: REDCOMPRA,VISA,MASTERCARD,DINERS,AMEX,MAGNA,PREPAGO
    TypeAccountValues:
      value: 010,020,040
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
  application-authentication-source:
    - header
tags:
  - name: Qr Codes
  - name: Qr Payments
definitions:
  _error:
    description: Definición de mensaje de error de
    type: object
    properties:
      code:
        description: >-
          Código de error específico de la aplicación, expresado como un valor
          de string.
        type: string
      detail:
        description: >-
          Una explicación legible y específica para ésta ocurrencia del
          problema.
        type: string
      source:
        $ref: '#/definitions/Pointer'
        properties:
          pointer:
            description: >-
              Un puntero JSON [RFC6901] asociada a la entided en el documento de
              solicitud [e.g. "/data" ara un objeto principal, o
              "/data/attributes/title" para un objeto en específico attribute].
            type: string
          parameter:
            description: Un string que indica qué parámetro de la consulta causó el error.
            type: string
  _verificationError:
    description: Error de verificaciones previas a ejecución de API
    type: object
    properties:
      httpCode:
        description: Status HTTP
        type: string
      httpMessage:
        description: Mensaje de error
        type: string
      moreInformation:
        description: Descripción del error presentado
        type: string
    example:
      httpCode: '429'
      httpMessage: Too Many Requests
      moreInformation: Too Many Requests. Upgrade the plan
  ErrorRs:
    description: Representación del error presentado
    type: object
    properties:
      meta:
        $ref: '#/definitions/_metaRs'
        description: Arreglo de errores presentados en la solicitud
      errors:
        description: ''
        type: array
        items:
          $ref: '#/definitions/_error'
  PaymentType:
    description: ''
    type: object
    properties:
      code:
        description: >-
          Código de producto seleccionado por TH. Longitud máxima 3 caracteres.
          Posibles valores "VN", "SI", "VC", "VD", "S2", "NC", "VP", "TF"
        enum:
          - '"VN"'
          - '"SI"'
          - '"VC"'
          - '"VD"'
          - '"S2"'
          - '"NC"'
          - '"VP"'
          - '"TF"'
        type: string
      description:
        description: Longitud máxima 2048 caracteres.
        type: string
      maxShares:
        description: >-
          Máximo de cuotas. El valor máximo es de 48. Longitud máxima 3
          caracteres.
        type: number
      minShares:
        description: Mínimo de cuotas. El valor mínimo es 1 que representa "si cuotas".
        type: number
  ValidateRs:
    description: Información contenida de la validación del código
    type: object
    properties:
      meta:
        $ref: '#/definitions/_metaRs'
        description: ''
      links:
        $ref: '#/definitions/_links'
        description: ''
      data:
        $ref: '#/definitions/Validate'
        description: ''
  AuthorizeRq:
    description: ''
    type: object
    properties:
      meta:
        $ref: '#/definitions/_metaRq'
        description: Definición de metadata de solicitud (definida por JSON-API)
      data:
        $ref: '#/definitions/AuthorizeInfo'
        description: Información de la transacción que se desea crear
    example:
      meta:
        _rqDateTime: 2018-02-10T09:30Z
      data:
        id: '123456789023454310000'
        notifyURL: https://internal.banco.cl/callback
        paymentType: card|tef
        userSelection:
          - paymentType: TF
            shares: 3
            childId: 13A8b
          - paymentType: TF
            shares: 3
            childId: 13A8bn
        card:
          cardNumber: '1234567812345678'
          expirationDate: 202312
          cavv: '964'
          vci: '147'
          eci: '258'
          cvv: '931'
          cardType: DEBIT
          cardBrand: MAGNA
        tef:
          token: uP2mJRg3samMQslR6DJ2
          numberAccount: '01234567890'
          typeAccount: 020|030|040
          emisorCodeCmf: '017'
          idWallet: '0001'
          rutUser: 444-8
          nameUser: ana melo
          phoneNumber: '986756324'
          emailUser: ana.melo@gmail.com
  AuthorizeRqNormal:
    description: ''
    type: object
    properties:
      meta:
        $ref: '#/definitions/_metaRq'
        description: Definición de metadata de solicitud (definida por JSON-API)
      data:
        $ref: '#/definitions/AuthorizeInfo'
        description: Información de la transacción que se desea crear
    example:
      meta:
        _rqDateTime: 2018-02-10T09:30Z
      data:
        id: '123456789023454310000'
        notifyURL: https://internal.banco.cl/callback
        paymentType: card|tef
        userSelection:
          - paymentType: VTQ
            shares: 3
            childId: 13A8b
          - paymentType: VTQ
            shares: 3
            childId: 13A8bn
        card:
          cardNumber: '1234567812345678'
          expirationDate: 202312
          cavv: '964'
          vci: '147'
          eci: '258'
          cvv: '931'
          cardType: DEBIT
          cardBrand: MAGNA
        tef:
          token: uP2mJRg3samMQslR6DJ2
          numberAccount: '01234567890'
          typeAccount: 020|030|040
          emisorCodeCmf: '017'
          idWallet: '0001'
          rutUser: 444-8
          nameUser: ana melo
          phoneNumber: '986756324'
          emailUser: ana.melo@gmail.com
  UserSelection:
    description: ''
    required:
      - paymentType
    type: object
    properties:
      paymentType:
        description: >-
          Código de producto seleccionado por TH. Longitud máxima 3 caracteres.
          Posibles valores "VN", "SI", "VC", "VD", "S2", "NC", "VP", "VTQ"
        type: string
      shares:
        description: >-
          Número de coutas seleccionadas por TH.  El valor máximo es de **48**.
          Longitud máxima **3** caracteres, este campo no debe ser enviado en el
          caso de que la transacción sea **Debito** o **Prepago**. Este campo se
          debe enviar para los casos normal y mall, tenga en cuenta que el valor
          del childId debe #tomarse a partir de la respuesta obtenida en la
          operación Validación Códigos QR.
        type: integer
      childId:
        description: ''
        type: string
  Card:
    description: Medio de pago tarjeta
    type: object
    properties:
      cardNumber:
        description: >-
          Número de la tarjeta(crédito o débito). Campo cifrado. Longitud máxima
          20 caracteres sin cifrar. Longitud máxima 64 caracteres cifrado, más
          16 caracteres que representa el iv.
        pattern: ^\d{13,22}$
        type: string
      expirationDate:
        description: >-
          Año y mes de expiración de la tarjeta.  **Campo cifrado**. Este campo
          es **obligatorio** si el campo paymentType se envía alguno de estos
          valores: **"VN", "S2", "SI", "NC", "VD" o "VC"**, debido a que este
          campo es mandatorio si la transacción es **Credito** o **Debito**.
          Formato "YYMM".  Longitud **4** caracteres, más **16** caracteres que
          representa el iv.
        pattern: '[0-9]{2}(?:0[1-9]|1[0-2])'
        type: string
      cavv:
        description: >-
          Datos de autenticación bancaria.  **Campo cifrado**.   Longitud máxima
          **40** caracteres sin cifrar.  Longitud máxima **96** caracteres
          cifrado, más **16** caracteres que representa el iv. Debe enviar los 3
          campos "cavv", "eci" y "vci". Solo usar en caso de tarjetas enroladas
          en 3DS.
        pattern: ^\w{2,40}$
        type: string
      vci:
        description: >-
          Indicador alfanumérico de la respuesta de autenticación, indica con un
          mayor nivel de detalle el resultado de la autenticación o la causal
          del rechazo de la autenticación. Campo cifrado. Longitud máxima 4
          caracteres alfanumérico sin cifrar. Longitud máxima 32 caracteres
          cifrado, más 16 caracteres que representa el iv. Debe enviar los 3
          campos "cavv", "eci" y "vci". Solo usar en caso de tarjetas enroladas
          en 3DS.
        pattern: ^\w{1,4}$
        type: string
      eci:
        description: >-
          Código numérico que indica el resultado del proceso de autenticación.
          Campo cifrado. Longitud máxima 2 caracteres sin cifrar. Longitud
          máxima 32 caracteres cifrado, más 16 caracteres que representa el iv. 
          Debe enviar los 3 campos "cavv", "eci" y "vci". Solo usar en caso de
          tarjetas enroladas en 3DS.
        pattern: ^\d{1,2}$
        type: string
      cvv:
        description: >-
          Datos de autenticación bancaria.  **Campo cifrado**. Este campo es
          **obligatorio** si el campo paymentType se envía alguno de estos
          valores: **"VN", "S2", "SI", "NC" o "VC"**. Longitud máxima **4**
          caracteres sin cifrar. Longitud máxima **32** caracteres cifrado, más
          **16** caracteres que representa el iv. Solo para tarjetas de crédito.
        type: string
      cardType:
        description: 'Tipo de tarjeta. '
        enum:
          - CREDIT
          - DEBIT
          - PREPAID
        type: string
      cardBrand:
        description: Marca de la tarjeta
        enum:
          - REDCOMPRA
          - VISA
          - MASTERCARD
          - DINERS
          - AMEX
          - MAGNA
          - PREPAGO
        type: string
  Tef:
    description: ''
    type: object
    properties:
      token:
        description: token asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 30
      numCuenta:
        description: numCuenta asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 20
      emisorCodeCmf:
        description: codigo cmf del emisor
        pattern: ^\d{13,22}$
        type: string
        maxLength: 10
      idWallet:
        description: idWallet asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 10
      rutUser:
        description: rutUser asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 15
      nameUser:
        description: nameUser asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 50
      phoneNumber:
        description: phoneNumber asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 20
      emailUser:
        description: emailUser asociado a la cuenta
        pattern: ^\d{13,22}$
        type: string
        maxLength: 50
  _links:
    description: Un objeto de recurso PUEDE contener referencias a otros recursos.
    type: object
    properties:
      self:
        format: uri
        description: Un objeto de recurso PUEDE contener referencias a otros recursos.
        type: string
      related:
        format: uri
        type: string
  DetailsRs:
    description: ''
    type: object
    properties:
      meta:
        $ref: '#/definitions/_metaRs'
        description: ''
      links:
        $ref: '#/definitions/_links'
        description: ''
      data:
        $ref: '#/definitions/Voucher'
        description: ''
  _metaRs:
    description: Definición de metadata
    type: object
    properties:
      _version:
        description: Vesión de la API.  Este campo tiene como máximo 6 caracteres.
        type: string
        example: '1.0'
      _rqDateTime:
        format: date-time
        description: Fecha de la solicitud en formato ISO 8601 'yyyy-MM-ddThh:mm:ss'.
        type: string
        example: '2017-01-24T05:00:00'
      _clientId:
        description: >-
          Identificador de la organización dueña de la APP que realiza la
          invocación.
        type: string
        example: 899812212-1
      _clientPaymentId:
        description: >-
          Identificador de seguimiento de la invocación realizada. Longitud
          máxima de 32 caracteres alfanuméricos.
        type: string
    additionalProperties: false
  _metaRq:
    description: Definición de metadata(definida por JSON-API)
    type: object
    properties:
      _rqDateTime:
        format: date-time
        description: Fecha de la solicitud en formato ISO 8601 'yyyy-MM-ddThh:mm:ss'.
        type: string
        example: '2017-01-24T05:00:00'
    additionalProperties: false
  Pointer:
    description: ''
    type: object
    properties:
      pointer:
        description: ''
        type: string
  Commerce:
    description: ''
    required:
      - amount
      - name
      - type
      - code
      - brands
    type: object
    properties:
      paymentTypes:
        description: Lista de produtos de los tipos de pago soportados por el comercio.
        type: array
        items:
          $ref: '#/definitions/PaymentType'
      code:
        description: Código del comercio. Longitud máxima 16 caracteres alfanuméricos.
        type: string
      logoURL:
        description: >-
          Url que contiene el logo del comercio. Viene por defecto si no está.
          Longitud máxima 2048 caracteres alfanuméricos.
        type: string
      name:
        description: Nombre del comercio. Longitud máxima 60 caracteres alfanuméricos.
        type: string
      type:
        description: >-
          Las transacciones de pago pueden ser generadas por comercios de 2
          tipos.

          Estan los comercios "NORMAL", los cuales realizan ventas de forma
          unitaria bajo su razón social. Tambien existen los comercios "MALL"
          que agrupan comercios de tipo "NORMAL", un ejemplo de comercios "MALL"
          pueden ser los portales relacionados con el pago de cuentas.


          Si el largo de este arreglo es mayor a 1, entonces contendrá un
          comercio de tipo "MALL" y los demás registros serán de tipo "NORMAL".
          De lo contrario, el unico comercio que se recibirá como respuesta,
          será de tipo "NORMAL".
        enum:
          - MALL
          - NORMAL
        type: string
      childId:
        description: >-
          Este campo solo será devuelto en caso de que el pago corresponda a una
          agrupación de comercios. Este "childId" identifica al comercio de
          segundo nivel dentro de esta transaccion de pago QR. Este id permitirá
          autorizar posteriormente el pago en este comercio.
        maxLength: 16
        type: string
      purchaseOrder:
        description: Orden de compra generada por el ecommerce.
        type: string
      amount:
        description: >-
          Decimal 19,2 Monto de la venta. Campo cifrado. Longitud máxima 18
          caracteres sin cifrar. Longitud máxima 64 caracteres cifrado, más 16
          caracteres que representa el iv.
        maxLength: 100
        type: string
      brands:
        description: >-
          Arreglo con las marcas que son soportadas por los comercios para
          realizar el pago: "REDCOMPRA", "VISA", "MASTERCARD", "DINERS", "AMEX",
          "MAGNA", "PREPAGO"
        type: array
        items:
          type: string
  Validate:
    description: ''
    required:
      - id
      - totalAmount
      - currency
      - commerce
    type: object
    properties:
      id:
        description: >-
          Identificador único de la transacción, generada por CobroQR cuando se
          crea un código QR. Longitud máxima 50 caracteres.
        type: string
      totalAmount:
        description: >-
          Decimal 19,2 Monto total de la venta (venta + propina + vuelto). Campo
          cifrado. Longitud máxima 18 caracteres sin cifrar. Longitud máxima 64
          caracteres cifrado, más 16 caracteres que representa el iv.
        maxLength: 100
        type: string
      tip:
        description: >-
          Decimal 19,2 Monto de propina de la transacción si es soportado. Campo
          cifrado. Longitud máxima 18 caracteres sin cifrar. Longitud máxima 64
          caracteres cifrado, más 16 caracteres que representa el iv.
        maxLength: 100
        type: string
      timeRemaining:
        description: >-
          Tiempo restante para la expiración en segundos de la transacción
          completa. Longitud máxima 18 caracteres.
        type: number
      currency:
        description: >-
          Moneda del pago código ISO 4217 en código alfabético . Debe ser
          exactamente de 3 caracteres, por defecto tendra el valor 'CLP'. Campo
          cifrado. Longitud máxima 32 caracteres cifrado, más 16 caracteres que
          representa el iv.
        pattern: 'pattern: ^\w{3}$'
        type: string
      change:
        description: >-
          Monto total de la transacción a ingresar. Campo cifrado. Longitud
          máxima 18 caracteres sin cifrar. Longitud máxima 64 caracteres
          cifrado, más 16 caracteres que representa el iv.
        maxLength: 100
        type: string
      donation:
        format: double
        description: >-
          Monto total de la transacción a ingresar. Campo cifrado. Longitud
          máxima 18 caracteres sin cifrar. Longitud máxima 64 caracteres
          cifrado, más 16 caracteres que representa el iv.
        type: number
      commerce:
        description: Lista de comercios
        type: array
        items:
          $ref: '#/definitions/Commerce'
  AuthorizeInfo:
    description: Información de la transacción que se desea crear
    required:
      - id
      - notifyURL
      - paymentType
      - userSelection
    type: object
    properties:
      id:
        description: >-
          Identificador único de la transacción, generada por CobroQR cuando se
          crea un código QR. Longitud máxima 50 caracteres alfanuméricos.
        type: string
      notifyURL:
        description: >-
          Dirección URL de notificación para la respuesta de la transacción.
          Longitud máxima 2047 caracteres alfanuméricos.
        type: string
      paymentType:
        enum:
          - card
          - tef
      userSelection:
        description: ''
        type: array
        items:
          $ref: '#/definitions/UserSelection'
      card:
        description: Objecto que representa la informacion de tarjetas
        required:
          - paymentType
        type: object
        properties:
          cardNumber:
            description: >-
              Número de la tarjeta(crédito o débito). Campo cifrado. Longitud
              máxima 20 caracteres sin cifrar. Longitud máxima 64 caracteres
              cifrado, más 16 caracteres que representa el iv.
            pattern: ^\d{13,22}$
            type: string
          expirationDate:
            description: >-
              Año y mes de expiración de la tarjeta.  **Campo cifrado**. Este
              campo es **obligatorio** si el campo paymentType se envía alguno
              de estos valores: **"VN", "S2", "SI", "NC", "VD" o "VC"**, debido
              a que este campo es mandatorio si la transacción es **Credito** o
              **Debito**. Formato "YYMM".  Longitud **4** caracteres, más **16**
              caracteres que representa el iv.
            pattern: '[0-9]{2}(?:0[1-9]|1[0-2])'
            type: string
          cavv:
            description: >-
              Datos de autenticación bancaria.  **Campo cifrado**.   Longitud
              máxima **40** caracteres sin cifrar.  Longitud máxima **96**
              caracteres cifrado, más **16** caracteres que representa el iv.
              Debe enviar los 3 campos "cavv", "eci" y "vci". Solo usar en caso
              de tarjetas enroladas en 3DS.
            pattern: ^\w{2,40}$
            type: string
          vci:
            description: >-
              Indicador alfanumérico de la respuesta de autenticación, indica
              con un mayor nivel de detalle el resultado de la autenticación o
              la causal del rechazo de la autenticación. Campo cifrado. Longitud
              máxima 4 caracteres alfanumérico sin cifrar. Longitud máxima 32
              caracteres cifrado, más 16 caracteres que representa el iv. Debe
              enviar los 3 campos "cavv", "eci" y "vci". Solo usar en caso de
              tarjetas enroladas en 3DS.
            pattern: ^\w{1,4}$
            type: string
          eci:
            description: >-
              Código numérico que indica el resultado del proceso de
              autenticación. Campo cifrado. Longitud máxima 2 caracteres sin
              cifrar. Longitud máxima 32 caracteres cifrado, más 16 caracteres
              que representa el iv.  Debe enviar los 3 campos "cavv", "eci" y
              "vci". Solo usar en caso de tarjetas enroladas en 3DS.
            pattern: ^\d{1,2}$
            type: string
          cvv:
            description: >-
              Datos de autenticación bancaria.  **Campo cifrado**. Este campo es
              **obligatorio** si el campo paymentType se envía alguno de estos
              valores: **"VN", "S2", "SI", "NC" o "VC"**. Longitud máxima **4**
              caracteres sin cifrar. Longitud máxima **32** caracteres cifrado,
              más **16** caracteres que representa el iv. Solo para tarjetas de
              crédito.
            type: string
          cardType:
            description: 'Tipo de tarjeta. '
            enum:
              - CREDIT
              - DEBIT
              - PREPAID
            type: string
          cardBrand:
            description: Marca de la tarjeta
            enum:
              - REDCOMPRA
              - VISA
              - MASTERCARD
              - DINERS
              - AMEX
              - MAGNA
              - PREPAGO
            type: string
      tef:
        description: >-
          Objecto que representa la información para el medio de pago TEF
          (transferencia en linea)
        required:
          - paymentType
        type: object
        properties:
          token:
            description: token asociado a la cuenta.
            pattern: ^\d{13,22}$
            type: string
            maxLength: 30
          numberAccount:
            description: numero de la cuenta.
            pattern: ^\d{13,22}$
            type: string
            maxLength: 20
          typeAccount:
            description: tipo de cuenta del usuario. 010|020|040
            pattern: ^\d{13,22}$
            type: string
            maxLength: 3
          emisorCodeCmf:
            description: codigo cmf del emisor
            pattern: ^\d{13,22}$
            type: string
            maxLength: 10
          idWallet:
            description: idWallet asociado a la cuenta
            pattern: ^\d{13,22}$
            type: string
            maxLength: 10
          rutUser:
            description: rut del usuario
            pattern: ^\d{13,22}$
            type: string
            maxLength: 15
          nameUser:
            description: nombre del usuario.
            pattern: ^\d{13,22}$
            type: string
            maxLength: 50
          phoneNumber:
            description: numero de telefono del usuario.
            pattern: ^\d{13,22}$
            type: string
            maxLength: 20
          emailUser:
            description: email del usuario.
            pattern: ^\d{13,22}$
            type: string
            maxLength: 50
  DetailByCommerceRs:
    description: ''
    required:
      - sharesDescription
      - status
    type: object
    properties:
      buyOrder:
        description: Identificador de orden de compra
        type: string
      isReceipt:
        description: Indica si el comprobante es válido como boleta.
        type: boolean
      rut:
        description: RUT del comercio.
        type: string
      address:
        description: Dirección del comercio. Longitud máxima 50 caracteres alfanuméricos.
        type: string
      operationNumber:
        description: Número de operación interno. Longitud máxima 18 caracteres.
        type: string
      amount:
        description: >-
          Monto total de la transacción a ingresar. Campo cifrado. Longitud
          máxima 18 caracteres sin cifrar. Longitud máxima 64 caracteres
          cifrado, más 16 caracteres que representa el iv.
        type: string
      date:
        description: Fecha en formato timestamp '1651693361000'
        type: string
        example: '1651693361000'
      authorizationCode:
        description: >-
          Código de autorización de la transacción (Paymenthost). Campo cifrado.
          Longitud máxima 18 caracteres sin cifrar. Longitud máxima 64
          caracteres cifrado, más 16 caracteres que representa el iv.
        type: string
      name:
        description: Nombre del comercio. Longitud máxima 60 caracteres alfanuméricos.
        type: string
      shares:
        description: >-
          Número total de cuotas para venta en Crédito. El valor máximo es de
          48. Longitud máxima 3 caracteres.
        type: number
      sharesDescription:
        description: Descripción del tipo de cuotas.
        type: string
      status:
        description: ''
        enum:
          - AUTHORIZED
          - NULLIFIED
        type: string
      childId:
        description: Id del comercio en el mall
        type: string
  Voucher:
    description: ''
    required:
      - totalAmount
      - payments
      - currency
    type: object
    properties:
      tipAmount:
        description: >-
          Decimal 19,2. Monto total de la propina relacionada a la transacción.
          Campo cifrado. Longitud máxima 64 caracteres cifrado, más 16
          caracteres que representa el iv.
        type: string
      totalAmount:
        description: >-
          Decimal 19,2. Monto total de la venta (veta + propina + vuelto). Campo
          cifrado. Longitud máxima 18 caracteres sin cifrar. Longitud máxima 64
          caracteres cifrado, más 16 caracteres que representa el iv.
        type: string
      changeAmount:
        description: >-
          Decimal 19,2, Vuelto o cambio de la venta. Campo cifrado. Longitud
          máxima 18 caracteres sin cifrar. Longitud máxima 64 caracteres
          cifrado, más 16 caracteres que representa el iv.
        type: string
      donationAmount:
        description: >-
          Decimal 19,2, Donación. Campo cifrado. Longitud máxima 18 caracteres
          sin cifrar. Longitud máxima 64 caracteres cifrado, más 16 caracteres
          que representa el iv.
        type: string
      paymentCard:
        $ref: '#/definitions/PaymentCard'
        description: Tipo de tarjeta utilizada en la transacción.
      paymentTef:
        $ref: '#/definitions/PaymentTef'
        description: detalle de pago con medio de pago TEF
      payments:
        description: Lista de transacciones realizadas
        type: array
        items:
          $ref: '#/definitions/DetailByCommerceRs'
      balance:
        description: ''
        type: string
      balancePrepaid:
        description: >-
          Decimal 19,2, Monto Disponible en Tarjeta de prepago. Campo cifrado.
          Longitud máxima 18 caracteres sin cifrar. Longitud máxima 64
          caracteres cifrado, más 16 caracteres que representa el iv.
        type: string
      currency:
        description: >-
          Moneda del pago código ISO 4217 en código alfabético . Debe ser
          exactamente de 3 caracteres, por defecto tendra el valor 'CLP'. Campo
          cifrado. Longitud máxima 32 caracteres cifrado, más 16 caracteres que
          representa el iv.
        type: string
  PaymentCard:
    description: ''
    required:
      - brand
      - cardType
      - lastNumber
    type: object
    properties:
      brand:
        description: Marca de la tarjeta de pago.
        enum:
          - REDCOMPRA
          - VISA
          - MASTERCARD
          - DINERS
          - AMEX
          - MAGNA
          - PREPAGO
        type: string
      cardType:
        description: Tipo de tarjeta de pago
        enum:
          - CREDIT
          - DEBIT
          - PREPAID
        type: string
      lastNumber:
        description: Últimos 4 digitos de la tarjeta de pago.
        type: string
  PaymentTef:
    description: ''
    required:
      - numberAccount
      - typeAccount
      - nameUser
      - emailUser
    type: object
    properties:
      numberAccount:
        description: numero de la cuenta.
        pattern: ^\d{13,22}$
        type: string
        maxLength: 20
      typeAccount:
        description: tipo de cuenta del usuario. 010|020|040
        pattern: ^\d{13,22}$
        type: string
        maxLength: 3
      nameUser:
        description: nombre del usuario.
        pattern: ^\d{13,22}$
        type: string
        maxLength: 50
      emailUser:
        description: email del usuario.
        pattern: ^\d{13,22}$
        type: string
        maxLength: 50
paths:
  /qr-payments:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Qr Payments
      parameters:
        - name: X-Mock
          in: header
          required: false
          description: >-
            Header requerido cuando se realiza invocación a Mocks, si se desea
            enviar este header es necesario que el valor enviado corresponda a
            la respuesta que espera recibir.
          type: string
        - name: X-App-Key
          in: header
          required: true
          description: Header requerido al momento de relizar lo solicitud.
          type: string
        - name: id
          in: query
          required: true
          description: >-
            Identificador de la transacción de la cual se desea obtener su
            información. Longitud máxima 50 caracteres alfanuméricos.
          type: string
        - name: X-App-Sign
          in: header
          required: true
          description: >-
            Header requerido para validar la integridad del mensaje de la
            solicitud.
          type: string
        - name: X-Client-Payment-Id
          in: header
          required: true
          description: >-
            Uiid que permite tanto a la Billetera como a Transbank dar
            trazabilidad completa a un flujo de pago a lo largo de las distintas
            operaciones que completan el ciclo de vida de la transacción, debe
            ser de  un largo mínimo de 10 y máximo de 20 caracteres
            alfanuméricos.
          type: string
        - name: X-User-Id
          in: header
          required: false
          description: >-
            Usuario de la aplicación wallet que realiza el pago. Con este campo
            se quiere lograr una trazabilidad del usuario enviado, debe ser de
            un largo mínimo de 5 y máximo de 50 caracteres alfanuméricos.
          type: string
      responses:
        '200':
          description: Resultado exitoso para consulta la informacion de una transacción.
          schema:
            $ref: '#/definitions/DetailsRs'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorRs'
        '401':
          description: Errores de Validación de mensajería y precondiciones de invocación.
          schema:
            $ref: '#/definitions/_verificationError'
        '403':
          description: >-
            Acción prohibida, rut con el que se quiere obtener el voucher, no
            inició la transacción
          schema:
            $ref: '#/definitions/ErrorRs'
        '404':
          description: Not Found, la transacción no se encuentra en la BD.
          schema:
            $ref: '#/definitions/ErrorRs'
        '422':
          description: >-
            Consulta no procesable debido a que los parametros no cumple con sus
            restricciones.
          schema:
            $ref: '#/definitions/ErrorRs'
        '429':
          description: Error presentado al momento de incumplimiento del plan definido
          schema:
            $ref: '#/definitions/_verificationError'
        '500':
          description: >-
            Internal Server Error. Cualquier error no manejado debe ser
            respondido con este error.
          schema:
            $ref: '#/definitions/ErrorRs'
        '503':
          description: >-
            Servicio no disponible, el servicion interno no respondio el mensaje
            espera
          schema:
            $ref: '#/definitions/ErrorRs'
      operationId: obtenerDetallePago
      summary: Obtener Detalle Transacción
      description: >-
        Operación que permite obtener la información asociada a la transacción
        solicitada.


        Esta operación responde con toda la información referente a la
        transacción que se realizó.


        La respuesta de la operación contendrá un header con el nombre
        X-App-Sign el cual podrá ser utilizado para validar la integridad del
        objeto data del mensaje de respuesta entregado.
    post:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Qr Payments
      parameters:
        - name: body
          description: >-
            Cuerpo requerido para realizar transacción de tipo MALL, pago con
            tarjeta de débito. Utiliza mas de un childId. Tener en cuenta que
            para las peticiónes realizadas con tarjetas débito enrolada en
            3D-Secure los campos opcionales **cavv**, **vci** y **eci** deben ir
            incluidos en el body.
          schema:
            $ref: '#/definitions/AuthorizeRq'
          in: body
          required: true
        - name: X-Mock
          description: >-
            Header requerido cuando se realiza invocación a Mocks, si se desea
            enviar este header es necesario que el valor enviado corresponda a
            la respuesta que espera recibir.
          in: header
          required: false
          type: string
          x-example: '200'
        - name: X-App-Key
          description: Header requerido al momento de relizar lo solicitud.
          in: header
          required: true
          type: string
          x-example: >-
            upLybPsD+VikJRbAz21HXfOX0NWfPix6OJQbaK0s9FhH1VrjUMKBG+DeCAc26mZl9rTnxTyNL6kwsKGFj9qSAuJzqplM9DMc6dPq1nh+K0fhf1Ylmy0+STMnnThiWBMlLT8CrvhOxFjWgtHEFWs/vJLb61Bd/TFOiDVd3ZWkkI3BpVVl9LbCBG9uTeM6I6Sf6Ja3fiJoRMl66gDnBbRC1DmVpo1uA7FKxD3sT6Jk/ftLxoLSwSmnD5oHRftiJyN64y2VlSfPcCTjYT2ayHkQ3FOQnx8zdpmrnKnWSO6Lf3vami83YNOBu5w6M789gFmyNhZMitZymWWpBsYoq/wZyw==
        - name: X-App-Sign
          description: >-
            Header requerido para validar la integridad del mensaje de la
            solicitud.
          in: header
          required: true
          type: string
          x-example: kcQca2zB8O00Ept3+lWOMGe8FMZ4MlfO5T+4VJlLrrc=
        - name: X-Client-Payment-Id
          description: >-
            Uiid que permite tanto a la Billetera como a Transbank dar
            trazabilidad completa a un flujo de pago a lo largo de las distintas
            operaciones que completan el ciclo de vida de la transacción, debe
            ser de  un largo mínimo de 10 y máximo de 20 caracteres
            alfanuméricos.
          in: header
          required: true
          type: string
        - name: X-User-Id
          description: >-
            Usuario de la aplicación wallet que realiza el pago. Con este campo
            se quiere lograr una trazabilidad del usuario enviado, debe ser de
            un largo mínimo de 5 y máximo de 18 caracteres alfanuméricos.
          in: header
          type: string
      responses:
        '204':
          description: Solicitud de autorizacion recibida de forma exitosa.
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '400'
                  detail: Bad Request
                  source:
                    pointer: TransactionValidate
        '401':
          description: Errores de Validación de mensajería y precondiciones de invocación.
          schema:
            $ref: '#/definitions/_verificationError'
          examples:
            application/json:
              httpCode: '401'
              httpMessage: Unauthorized
              moreInformation: Invalid client id or secret.
        '403':
          description: >-
            Acción prohibida, rut con el que se quiere obtener el voucher, no
            inició la transacción
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '403'
                  detail: >-
                    Acción prohibida, rut con el que se quiere obtener el
                    voucher, no inició la transacción
                  source:
                    pointer: TransactionValidate
        '404':
          description: Not Found, la transacción no se encuentra en la BD.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '404'
                  detail: Not Found, la transacción no se encuentra en la BD.
                  source:
                    pointer: TransactionValidate
        '406':
          description: >-
            Not Acceptable. La transacción fué cancelada por el comercio. *Error
            reportado por el canal.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '406'
                  detail: >-
                    Not Acceptable. La transacción fué cancelada por el
                    comercio. *Error reportado por el canal.
                  source:
                    pointer: TransactionValidate
        '410':
          description: Gone. transactionId está expirado. *Error reportado por el canal
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '410'
                  detail: >-
                    Gone. transactionId está expirado. *Error reportado por el
                    canal
                  source:
                    pointer: TransactionValidate
        '422':
          description: >-
            Consulta no procesable debido a que los parametros no cumple con sus
            restricciones.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: 2022-01-10T09:30Z
                _clientId: 1927462-1
                _clientPaymentId: 58a380dd61fc58ab005d4991
              errors:
                - code: '422'
                  detail: la data enviada no es una data valida
                  source:
                    pointer: data
                - code: '422'
                  detail: el parametro expirationDate debe ser válido
                  source:
                    pointer: expirationDate
        '429':
          description: Error presentado al momento de incumplimiento del plan definido
          schema:
            $ref: '#/definitions/_verificationError'
          examples:
            application/json:
              httpCode: '429'
              httpMessage: Too Many Requests
              moreInformation: Too Many Requests. Upgrade the plan
        '500':
          description: Internal Server Error. Se diferencian por el código.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '500'
                  detail: Internal Server Error. Se diferencian por el código.
                  source:
                    pointer: TransactionValidate
        '503':
          description: >-
            Servicio no disponible, el servicio interno no respondio el mensaje
            esperado
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: 2022-01-10T09:30Z
                _clientId: 203030331-2
                _clientPaymentId: 58a380dd61fc58c1005d4a11
              errors:
                - code: '503'
                  detail: El servicio interno no se encuentra en funcionamiento.
      operationId: AutorizarPago
      summary: Autorización Transacción
      description: >-
        Esta operación realiza la inserción de la transacción autorizada,
        retorna si la transacción fue creada con éxito y la fecha en la cual se
        realizo la solicitud.
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Qr Payments
      parameters:
        - name: id
          description: >-
            Identificador de la transacción de la cual se desea obtener su
            información. Longitud máxima 50 caracteres alfanuméricos.
          in: query
          required: true
          type: string
        - name: X-Mock
          description: >-
            Header requerido cuando se realiza invocación a Mocks, si se desea
            enviar este header es necesario que el valor enviado corresponda a
            la respuesta que espera recibir.
          in: header
          required: false
          type: string
          x-example: '503'
        - name: X-User-Id
          description: >-
            Usuario de la aplicación wallet que realiza el pago. Con este campo
            se quiere lograr una trazabilidad del usuario enviado, debe ser de
            un largo mínimo de 5 y máximo de 18 caracteres alfanuméricos.
          in: header
          type: string
        - name: X-Client-Payment-Id
          description: >-
            Uiid que permite tanto a la Billetera como a Transbank dar
            trazabilidad completa a un flujo de pago a lo largo de las distintas
            operaciones que completan el ciclo de vida de la transacción, debe
            ser de  un largo mínimo de 10 y máximo de 20 caracteres
            alfanuméricos.
          in: header
          required: true
          type: string
        - name: X-App-Key
          description: Header requerido al momento de relizar lo solicitud.
          in: header
          required: true
          type: string
        - name: X-App-Sign
          description: >-
            Header requerido para validar la integridad del mensaje de la
            solicitud.
          in: header
          required: true
          type: string
      responses:
        '204':
          description: Resultado exitoso para la cancelación de la transacción.
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '400'
                  detail: Bad Request
                  source:
                    pointer: TransactionValidate
        '401':
          description: Errores de Validación de mensajería y precondiciones de invocación.
          schema:
            $ref: '#/definitions/_verificationError'
          examples:
            application/json:
              httpCode: '401'
              httpMessage: Unauthorized
              moreInformation: >-
                Client certificates for mutual TLS in the API request doesn't
                match the registered certificate.
        '403':
          description: >-
            Acción prohibida, rut con el que se quiere cancelar, no inició la
            transacción
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '403'
                  detail: >-
                    Acción prohibida, rut con el que se quiere cancelar, no
                    inició la transacción
                  source:
                    pointer: TransactionValidate
        '404':
          description: Not Found, la transacción no se encuentra en la BD.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '404'
                  detail: Not Found, la transacción no se encuentra en la BD.
                  source:
                    pointer: TransactionValidate
        '422':
          description: >-
            Consulta no procesable debido a que los parametros no cumple con sus
            restricciones.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: 2022-01-10T09:30Z
                _clientId: 932016301-2
                _clientPaymentId: 58a380dd61fc58e8002ac782
              errors:
                - code: '422'
                  detail: Identiifcador de la transacción invalido
                  source:
                    pointer: id
        '429':
          description: Error presentado al momento de incumplimiento del plan definido
          schema:
            $ref: '#/definitions/_verificationError'
          examples:
            application/json:
              httpCode: '429'
              httpMessage: Too Many Requests
              moreInformation: Too Many Requests. Upgrade the plan
        '500':
          description: >-
            Internal Server Error. Cualquier error no manejado debe ser
            respondido con este error.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '500'
                  detail: >-
                    Internal Server Error. Cualquier error no manejado debe ser
                    respondido con este error.
                  source:
                    pointer: TransactionValidate
        '503':
          description: >-
            Servicio no disponible, el servicion interno no respondio el mensaje
            espera
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: 2022-01-10T09:30Z
                _clientId: 203030331-2
                _clientPaymentId: 58a380dd61fc58f500159c93
              errors:
                - code: '503'
                  detail: El servicio interno no se encuentra en funcionamiento
      operationId: RechazarPago
      summary: Rechazar Pago
      description: >-
        Esta operación se ocupa de poder notificar los posibles casos de
        cancelación de una transacción de QR desde la aplicación wallet
        registrada en el backend de Transbank
  /qr-codes:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Qr Codes
      parameters:
        - name: codeKey
          description: >-
            Información del código QR emitido por Transbank y capturado por las
            billeteras. Esta generado bajo el estadar [EMV - Europay MasterCard
            VISA]. Este campo es obligatorio si el campo simpleCode no es
            enviado. Longitud máxima 1024 caracteres alfanuméricos.
          in: query
          required: false
          type: string
          x-example: >-
            00020101021126430012cl%20transbank011259701234567802079990997520400005303152540712000%2005502015802CL5921F
            Juanita6008Santiago80690%20transb%20options0108T00000080206Webpay0306PagoQr040588383817%20%20uuid01363fd62d46%207e96%204cec3f6ad0e9b87f6304B211
        - name: simpleCode
          description: >-
            Código de compra QR ingresado manualmente que tiene que cumplir la
            estructura de un código emitido por Transbank (letras minúsculas,
            mayúsculas y números) para ser considerado válido.  Este campo es
            **obligatorio** si el campo **codeKey** no es enviado. Longitud
            máxima de **8** caracteres alfanuméricos.
          in: query
          type: string
          x-example: TABC1234
        - name: X-Mock
          description: >-
            Header requerido cuando se realiza invocación a Mocks, si se desea
            enviar este header es necesario que el valor enviado corresponda a
            la respuesta que espera recibir.
          in: header
          type: string
          x-example: '200'
        - name: X-App-Key
          description: Header requerido al momento de relizar lo solicitud.
          in: header
          required: true
          type: string
          x-example: >-
            upLybPsD+VikJRbAz21HXfOX0NWfPix6OJQbaK0s9FhH1VrjUMKBG+DeCAc26mZl9rTnxTyNL6kwsKGFj9qSAuJzqplM9DMc6dPq1nh+K0fhf1Ylmy0+STMnnThiWBMlLT8CrvhOxFjWgtHEFWs/vJLb61Bd/TFOiDVd3ZWkkI3BpVVl9LbCBG9uTeM6I6Sf6Ja3fiJoRMl66gDnBbRC1DmVpo1uA7FKxD3sT6Jk/ftLxoLSwSmnD5oHRftiJyN64y2VlSfPcCTjYT2ayHkQ3FOQnx8zdpmrnKnWSO6Lf3vami83YNOBu5w6M789gFmyNhZMitZymWWpBsYoq/wZyw==
        - name: X-App-Sign
          description: >-
            Header requerido para validar la integridad del mensaje de la
            solicitud.
          in: header
          required: true
          type: string
          x-example: kcQca2zB8O00Ept3+lWOMGe8FMZ4MlfO5T+4VJlLrrc=
        - name: X-Client-Payment-Id
          description: >-
            Uiid que permite tanto a la Billetera como a Transbank dar
            trazabilidad completa a un flujo de pago a lo largo de las distintas
            operaciones que completan el ciclo de vida de la transacción, debe
            ser de  un largo mínimo de 10 y máximo de 20 caracteres
            alfanuméricos.
          in: header
          required: true
          type: string
        - name: X-User-Id
          description: >-
            Usuario de la aplicación wallet que realiza el pago. Con este campo
            se quiere lograr una trazabilidad del usuario enviado, debe ser de
            un largo mínimo de 5 y máximo de 18 caracteres alfanuméricos.
          in: header
          type: string
      responses:
        '200':
          description: Resultado exitoso para la validación de un código QR.
          schema:
            $ref: '#/definitions/ValidateRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc59070074e070
              links:
                self: >-
                  https://api.transbank.cl/transbank/publico/qrCodes?codeKey=946103610364u44y2842&date=2022-01-20&walletUUID=1234567891011121400
              data:
                id: '123456789023454310'
                timeRemaining: 300
                tip: aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9
                totalAmount: abc5c689edca7c85db0dfee102ef7a5aa4c1bc43714ee2f7
                currency: abfc2c764ddea5c77db0dfee209ef4a2aa6c3bc23511ea3d9
                change: aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9
                donation: aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9
                commerce:
                  - paymentTypes:
                      - code: VP
                        minShares: 0
                        maxShares: 0
                        description: Venta Prepago
                      - code: VN
                        minShares: 0
                        maxShares: 0
                        description: Venta Normal
                      - code: SI
                        minShares: 3
                        maxShares: 3
                        description: Tres Cuotas Sin Interes
                      - code: VC
                        minShares: 2
                        maxShares: 24
                        description: Venta N Cuotas
                    name: Recaudador
                    childId: a1001
                    code: '597038358200'
                    logoURL: >-
                      https://web1qa.test.transbank.cl:8443/imagingservlet/LogoServlet?commerceId=597038358200
                    type: MALL
                    purchaseOrder: '123456789'
                    amount: adf3d877eefb8d69ec1fgee213ff8b6bb5d2cd54729fb2f0
                    brands:
                      - REDCOMPRA
                      - VISA
                      - MASTERCARD
                      - DINERS
                      - AMEX
                      - MAGNA
                  - paymentTypes:
                      - code: VN
                        minShares: 0
                        maxShares: 0
                        description: Venta Normal
                      - code: SI
                        minShares: 3
                        maxShares: 3
                        description: Tres Cuotas Sin Interes
                      - code: VC
                        minShares: 2
                        maxShares: 24
                        description: Venta Cuotas
                    name: Empresa Telefonia
                    code: '597038358201'
                    logoURL: >-
                      https://web1qa.test.transbank.cl:8443/imagingservlet/LogoServlet?commerceId=597038358201
                    type: NORMAL
                    childId: a1002
                    purchaseOrder: '987654321'
                    amount: aac4c766ddea7c58db0dfee102ef7a5aa4c1bc43618ea2d9
                    brands:
                      - REDCOMPRA
                      - VISA
                      - MASTERCARD
                      - DINERS
                      - AMEX
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '400'
                  detail: Bad Request
                  source:
                    pointer: TransactionValidate
        '401':
          description: Errores de Validación de mensajería y precondiciones de invocación.
          schema:
            $ref: '#/definitions/_verificationError'
          examples:
            application/json:
              httpCode: '401'
              httpMessage: Unauthorized
              moreInformation: Invalid client id or secret.
        '404':
          description: >-
            Not Found, El codekey o simpleCode ingresado no se encuentra en la
            BD.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '404'
                  detail: >-
                    Not Found, El codekey o simpleCode ingresado no se encuentra
                    en la BD.
                  source:
                    pointer: TransactionValidate
        '410':
          description: El codeKey o simpleCode se encuentra expirado
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '410'
                  detail: El codeKey o simpleCode esta expirado
                  source:
                    pointer: simpleCode
        '422':
          description: >-
            Consulta no procesable debido a que los parametros no cumple con sus
            restricciones.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc59c4005d4e31
              errors:
                - code: '422'
                  detail: el parametro simple-code no cumple con el formato esperado
                  source:
                    pointer: simpleCode
                - code: '422'
                  detail: el parametro amount debe ser númerico
                  source:
                    pointer: amount
        '423':
          description: El codeKey o simpleCode ya fue utilizado
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc59d0005d4e71
              errors:
                - code: '423'
                  detail: El codeKey o simpleCode ya fué utilizado
                  source:
                    pointer: simpleCode
        '429':
          description: Error presentado al momento de incumplimiento del plan definido
          schema:
            $ref: '#/definitions/_verificationError'
          examples:
            application/json:
              httpCode: '429'
              httpMessage: Too Many Requests
              moreInformation: Too Many Requests. Upgrade the plan
        '500':
          description: >-
            Internal Server Error. Cualquier error no manejado debe ser
            respondido con este error.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc5969005d4bb1
              errors:
                - code: '500'
                  detail: >-
                    Internal Server Error. Cualquier error no manejado debe ser
                    respondido con este error.
                  source:
                    pointer: TransactionValidate
        '503':
          description: >-
            Servicio no disponible, el servicion interno no respondio el mensaje
            esperado.
          schema:
            $ref: '#/definitions/ErrorRs'
          examples:
            application/json:
              meta:
                _version: 2.0.17
                _rqDateTime: '2022-01-25T13:53:40.553Z'
                _clientId: 8303713-1
                _clientPaymentId: 58a380dd61fc59db0074e450
              errors:
                - code: '503'
                  detail: El servicio interno no se encuentra en funcionamiento
      operationId: ValidarCodidoQR
      summary: Validación Códigos QR
      description: >-
        Operación que permite validar la información contenida en el código QR.


        Con esta operación se valida que el código de QR haya sido emitido por
        Transbank, además de la validación de su integridad, para luego entregar
        información de la transacción que se quiere llevar a cabo.


        La respuesta de la operación contendrá un header con el nombre X App
        Sign el cual podrá ser utilizado para validar la integridad del objeto
        data del mensaje de respuesta entregado.